
UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ff4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08003100  08003100  00013100  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003150  08003150  00020028  2**0
                  CONTENTS
  4 .ARM          00000000  08003150  08003150  00020028  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003150  08003150  00020028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003150  08003150  00013150  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003154  08003154  00013154  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000028  20000000  08003158  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000114  20000028  08003180  00020028  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000013c  08003180  0002013c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ed65  00000000  00000000  00020051  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002050  00000000  00000000  0002edb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d50  00000000  00000000  00030e08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c88  00000000  00000000  00031b58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017709  00000000  00000000  000327e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f1bc  00000000  00000000  00049ee9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d5f1  00000000  00000000  000590a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e6696  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037f0  00000000  00000000  000e66ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000028 	.word	0x20000028
 8000128:	00000000 	.word	0x00000000
 800012c:	080030e8 	.word	0x080030e8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000002c 	.word	0x2000002c
 8000148:	080030e8 	.word	0x080030e8

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <strlen>:
 8000160:	4603      	mov	r3, r0
 8000162:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000166:	2a00      	cmp	r2, #0
 8000168:	d1fb      	bne.n	8000162 <strlen+0x2>
 800016a:	1a18      	subs	r0, r3, r0
 800016c:	3801      	subs	r0, #1
 800016e:	4770      	bx	lr

08000170 <HAL_UART_RxCpltCallback>:
uint8_t command_ok[] = "!OK#";
uint8_t command_rst[] = "!RST#";
uint8_t command_adc[] = "!ADC=";
uint8_t newline[]= "\r\n";

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000170:	b580      	push	{r7, lr}
 8000172:	b082      	sub	sp, #8
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART2){
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	681b      	ldr	r3, [r3, #0]
 800017c:	4a07      	ldr	r2, [pc, #28]	; (800019c <HAL_UART_RxCpltCallback+0x2c>)
 800017e:	4293      	cmp	r3, r2
 8000180:	d107      	bne.n	8000192 <HAL_UART_RxCpltCallback+0x22>
		HAL_UART_Receive_IT(&huart2, &temp, 1);
 8000182:	2201      	movs	r2, #1
 8000184:	4906      	ldr	r1, [pc, #24]	; (80001a0 <HAL_UART_RxCpltCallback+0x30>)
 8000186:	4807      	ldr	r0, [pc, #28]	; (80001a4 <HAL_UART_RxCpltCallback+0x34>)
 8000188:	f002 f981 	bl	800248e <HAL_UART_Receive_IT>
		buffer_flag = 1;
 800018c:	4b06      	ldr	r3, [pc, #24]	; (80001a8 <HAL_UART_RxCpltCallback+0x38>)
 800018e:	2201      	movs	r2, #1
 8000190:	701a      	strb	r2, [r3, #0]
	}
}
 8000192:	bf00      	nop
 8000194:	3708      	adds	r7, #8
 8000196:	46bd      	mov	sp, r7
 8000198:	bd80      	pop	{r7, pc}
 800019a:	bf00      	nop
 800019c:	40004400 	.word	0x40004400
 80001a0:	20000048 	.word	0x20000048
 80001a4:	200000f0 	.word	0x200000f0
 80001a8:	2000004a 	.word	0x2000004a

080001ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001ac:	b580      	push	{r7, lr}
 80001ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001b0:	f000 fba8 	bl	8000904 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001b4:	f000 f820 	bl	80001f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001b8:	f000 f922 	bl	8000400 <MX_GPIO_Init>
  MX_ADC1_Init();
 80001bc:	f000 f86c 	bl	8000298 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 80001c0:	f000 f8f4 	bl	80003ac <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80001c4:	f000 f8a6 	bl	8000314 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, &temp, 1);
 80001c8:	2201      	movs	r2, #1
 80001ca:	4908      	ldr	r1, [pc, #32]	; (80001ec <main+0x40>)
 80001cc:	4808      	ldr	r0, [pc, #32]	; (80001f0 <main+0x44>)
 80001ce:	f002 f95e 	bl	800248e <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	    if(buffer_flag == 1){
 80001d2:	4b08      	ldr	r3, [pc, #32]	; (80001f4 <main+0x48>)
 80001d4:	781b      	ldrb	r3, [r3, #0]
 80001d6:	2b01      	cmp	r3, #1
 80001d8:	d104      	bne.n	80001e4 <main+0x38>
	        command_parser_fsm();
 80001da:	f000 f943 	bl	8000464 <command_parser_fsm>
	        buffer_flag = 0;
 80001de:	4b05      	ldr	r3, [pc, #20]	; (80001f4 <main+0x48>)
 80001e0:	2200      	movs	r2, #0
 80001e2:	701a      	strb	r2, [r3, #0]
	    }
	    uart_communication_fsm();
 80001e4:	f000 f9f4 	bl	80005d0 <uart_communication_fsm>
	    if(buffer_flag == 1){
 80001e8:	e7f3      	b.n	80001d2 <main+0x26>
 80001ea:	bf00      	nop
 80001ec:	20000048 	.word	0x20000048
 80001f0:	200000f0 	.word	0x200000f0
 80001f4:	2000004a 	.word	0x2000004a

080001f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b094      	sub	sp, #80	; 0x50
 80001fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000202:	2228      	movs	r2, #40	; 0x28
 8000204:	2100      	movs	r1, #0
 8000206:	4618      	mov	r0, r3
 8000208:	f002 ff24 	bl	8003054 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800020c:	f107 0314 	add.w	r3, r7, #20
 8000210:	2200      	movs	r2, #0
 8000212:	601a      	str	r2, [r3, #0]
 8000214:	605a      	str	r2, [r3, #4]
 8000216:	609a      	str	r2, [r3, #8]
 8000218:	60da      	str	r2, [r3, #12]
 800021a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800021c:	1d3b      	adds	r3, r7, #4
 800021e:	2200      	movs	r2, #0
 8000220:	601a      	str	r2, [r3, #0]
 8000222:	605a      	str	r2, [r3, #4]
 8000224:	609a      	str	r2, [r3, #8]
 8000226:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000228:	2302      	movs	r3, #2
 800022a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800022c:	2301      	movs	r3, #1
 800022e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000230:	2310      	movs	r3, #16
 8000232:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000234:	2300      	movs	r3, #0
 8000236:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000238:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800023c:	4618      	mov	r0, r3
 800023e:	f001 f933 	bl	80014a8 <HAL_RCC_OscConfig>
 8000242:	4603      	mov	r3, r0
 8000244:	2b00      	cmp	r3, #0
 8000246:	d001      	beq.n	800024c <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000248:	f000 fa08 	bl	800065c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800024c:	230f      	movs	r3, #15
 800024e:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000250:	2300      	movs	r3, #0
 8000252:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000254:	2300      	movs	r3, #0
 8000256:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000258:	2300      	movs	r3, #0
 800025a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800025c:	2300      	movs	r3, #0
 800025e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000260:	f107 0314 	add.w	r3, r7, #20
 8000264:	2100      	movs	r1, #0
 8000266:	4618      	mov	r0, r3
 8000268:	f001 fb9e 	bl	80019a8 <HAL_RCC_ClockConfig>
 800026c:	4603      	mov	r3, r0
 800026e:	2b00      	cmp	r3, #0
 8000270:	d001      	beq.n	8000276 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000272:	f000 f9f3 	bl	800065c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000276:	2302      	movs	r3, #2
 8000278:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 800027a:	2300      	movs	r3, #0
 800027c:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800027e:	1d3b      	adds	r3, r7, #4
 8000280:	4618      	mov	r0, r3
 8000282:	f001 fd1f 	bl	8001cc4 <HAL_RCCEx_PeriphCLKConfig>
 8000286:	4603      	mov	r3, r0
 8000288:	2b00      	cmp	r3, #0
 800028a:	d001      	beq.n	8000290 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800028c:	f000 f9e6 	bl	800065c <Error_Handler>
  }
}
 8000290:	bf00      	nop
 8000292:	3750      	adds	r7, #80	; 0x50
 8000294:	46bd      	mov	sp, r7
 8000296:	bd80      	pop	{r7, pc}

08000298 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	b084      	sub	sp, #16
 800029c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800029e:	1d3b      	adds	r3, r7, #4
 80002a0:	2200      	movs	r2, #0
 80002a2:	601a      	str	r2, [r3, #0]
 80002a4:	605a      	str	r2, [r3, #4]
 80002a6:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80002a8:	4b18      	ldr	r3, [pc, #96]	; (800030c <MX_ADC1_Init+0x74>)
 80002aa:	4a19      	ldr	r2, [pc, #100]	; (8000310 <MX_ADC1_Init+0x78>)
 80002ac:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80002ae:	4b17      	ldr	r3, [pc, #92]	; (800030c <MX_ADC1_Init+0x74>)
 80002b0:	2200      	movs	r2, #0
 80002b2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80002b4:	4b15      	ldr	r3, [pc, #84]	; (800030c <MX_ADC1_Init+0x74>)
 80002b6:	2201      	movs	r2, #1
 80002b8:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80002ba:	4b14      	ldr	r3, [pc, #80]	; (800030c <MX_ADC1_Init+0x74>)
 80002bc:	2200      	movs	r2, #0
 80002be:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80002c0:	4b12      	ldr	r3, [pc, #72]	; (800030c <MX_ADC1_Init+0x74>)
 80002c2:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80002c6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80002c8:	4b10      	ldr	r3, [pc, #64]	; (800030c <MX_ADC1_Init+0x74>)
 80002ca:	2200      	movs	r2, #0
 80002cc:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80002ce:	4b0f      	ldr	r3, [pc, #60]	; (800030c <MX_ADC1_Init+0x74>)
 80002d0:	2201      	movs	r2, #1
 80002d2:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80002d4:	480d      	ldr	r0, [pc, #52]	; (800030c <MX_ADC1_Init+0x74>)
 80002d6:	f000 fb77 	bl	80009c8 <HAL_ADC_Init>
 80002da:	4603      	mov	r3, r0
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d001      	beq.n	80002e4 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80002e0:	f000 f9bc 	bl	800065c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80002e4:	2300      	movs	r3, #0
 80002e6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80002e8:	2301      	movs	r3, #1
 80002ea:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80002ec:	2300      	movs	r3, #0
 80002ee:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002f0:	1d3b      	adds	r3, r7, #4
 80002f2:	4619      	mov	r1, r3
 80002f4:	4805      	ldr	r0, [pc, #20]	; (800030c <MX_ADC1_Init+0x74>)
 80002f6:	f000 fc4b 	bl	8000b90 <HAL_ADC_ConfigChannel>
 80002fa:	4603      	mov	r3, r0
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d001      	beq.n	8000304 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000300:	f000 f9ac 	bl	800065c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000304:	bf00      	nop
 8000306:	3710      	adds	r7, #16
 8000308:	46bd      	mov	sp, r7
 800030a:	bd80      	pop	{r7, pc}
 800030c:	20000058 	.word	0x20000058
 8000310:	40012400 	.word	0x40012400

08000314 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b086      	sub	sp, #24
 8000318:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800031a:	f107 0308 	add.w	r3, r7, #8
 800031e:	2200      	movs	r2, #0
 8000320:	601a      	str	r2, [r3, #0]
 8000322:	605a      	str	r2, [r3, #4]
 8000324:	609a      	str	r2, [r3, #8]
 8000326:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000328:	463b      	mov	r3, r7
 800032a:	2200      	movs	r2, #0
 800032c:	601a      	str	r2, [r3, #0]
 800032e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000330:	4b1d      	ldr	r3, [pc, #116]	; (80003a8 <MX_TIM2_Init+0x94>)
 8000332:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000336:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000338:	4b1b      	ldr	r3, [pc, #108]	; (80003a8 <MX_TIM2_Init+0x94>)
 800033a:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800033e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000340:	4b19      	ldr	r3, [pc, #100]	; (80003a8 <MX_TIM2_Init+0x94>)
 8000342:	2200      	movs	r2, #0
 8000344:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000346:	4b18      	ldr	r3, [pc, #96]	; (80003a8 <MX_TIM2_Init+0x94>)
 8000348:	2209      	movs	r2, #9
 800034a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800034c:	4b16      	ldr	r3, [pc, #88]	; (80003a8 <MX_TIM2_Init+0x94>)
 800034e:	2200      	movs	r2, #0
 8000350:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000352:	4b15      	ldr	r3, [pc, #84]	; (80003a8 <MX_TIM2_Init+0x94>)
 8000354:	2200      	movs	r2, #0
 8000356:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000358:	4813      	ldr	r0, [pc, #76]	; (80003a8 <MX_TIM2_Init+0x94>)
 800035a:	f001 fd69 	bl	8001e30 <HAL_TIM_Base_Init>
 800035e:	4603      	mov	r3, r0
 8000360:	2b00      	cmp	r3, #0
 8000362:	d001      	beq.n	8000368 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000364:	f000 f97a 	bl	800065c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000368:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800036c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800036e:	f107 0308 	add.w	r3, r7, #8
 8000372:	4619      	mov	r1, r3
 8000374:	480c      	ldr	r0, [pc, #48]	; (80003a8 <MX_TIM2_Init+0x94>)
 8000376:	f001 fdaa 	bl	8001ece <HAL_TIM_ConfigClockSource>
 800037a:	4603      	mov	r3, r0
 800037c:	2b00      	cmp	r3, #0
 800037e:	d001      	beq.n	8000384 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000380:	f000 f96c 	bl	800065c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000384:	2300      	movs	r3, #0
 8000386:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000388:	2300      	movs	r3, #0
 800038a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800038c:	463b      	mov	r3, r7
 800038e:	4619      	mov	r1, r3
 8000390:	4805      	ldr	r0, [pc, #20]	; (80003a8 <MX_TIM2_Init+0x94>)
 8000392:	f001 ff51 	bl	8002238 <HAL_TIMEx_MasterConfigSynchronization>
 8000396:	4603      	mov	r3, r0
 8000398:	2b00      	cmp	r3, #0
 800039a:	d001      	beq.n	80003a0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800039c:	f000 f95e 	bl	800065c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80003a0:	bf00      	nop
 80003a2:	3718      	adds	r7, #24
 80003a4:	46bd      	mov	sp, r7
 80003a6:	bd80      	pop	{r7, pc}
 80003a8:	200000a8 	.word	0x200000a8

080003ac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80003b0:	4b11      	ldr	r3, [pc, #68]	; (80003f8 <MX_USART2_UART_Init+0x4c>)
 80003b2:	4a12      	ldr	r2, [pc, #72]	; (80003fc <MX_USART2_UART_Init+0x50>)
 80003b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80003b6:	4b10      	ldr	r3, [pc, #64]	; (80003f8 <MX_USART2_UART_Init+0x4c>)
 80003b8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80003bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80003be:	4b0e      	ldr	r3, [pc, #56]	; (80003f8 <MX_USART2_UART_Init+0x4c>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80003c4:	4b0c      	ldr	r3, [pc, #48]	; (80003f8 <MX_USART2_UART_Init+0x4c>)
 80003c6:	2200      	movs	r2, #0
 80003c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80003ca:	4b0b      	ldr	r3, [pc, #44]	; (80003f8 <MX_USART2_UART_Init+0x4c>)
 80003cc:	2200      	movs	r2, #0
 80003ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80003d0:	4b09      	ldr	r3, [pc, #36]	; (80003f8 <MX_USART2_UART_Init+0x4c>)
 80003d2:	220c      	movs	r2, #12
 80003d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003d6:	4b08      	ldr	r3, [pc, #32]	; (80003f8 <MX_USART2_UART_Init+0x4c>)
 80003d8:	2200      	movs	r2, #0
 80003da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80003dc:	4b06      	ldr	r3, [pc, #24]	; (80003f8 <MX_USART2_UART_Init+0x4c>)
 80003de:	2200      	movs	r2, #0
 80003e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80003e2:	4805      	ldr	r0, [pc, #20]	; (80003f8 <MX_USART2_UART_Init+0x4c>)
 80003e4:	f001 ff80 	bl	80022e8 <HAL_UART_Init>
 80003e8:	4603      	mov	r3, r0
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d001      	beq.n	80003f2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80003ee:	f000 f935 	bl	800065c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80003f2:	bf00      	nop
 80003f4:	bd80      	pop	{r7, pc}
 80003f6:	bf00      	nop
 80003f8:	200000f0 	.word	0x200000f0
 80003fc:	40004400 	.word	0x40004400

08000400 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	b086      	sub	sp, #24
 8000404:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000406:	f107 0308 	add.w	r3, r7, #8
 800040a:	2200      	movs	r2, #0
 800040c:	601a      	str	r2, [r3, #0]
 800040e:	605a      	str	r2, [r3, #4]
 8000410:	609a      	str	r2, [r3, #8]
 8000412:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000414:	4b11      	ldr	r3, [pc, #68]	; (800045c <MX_GPIO_Init+0x5c>)
 8000416:	699b      	ldr	r3, [r3, #24]
 8000418:	4a10      	ldr	r2, [pc, #64]	; (800045c <MX_GPIO_Init+0x5c>)
 800041a:	f043 0304 	orr.w	r3, r3, #4
 800041e:	6193      	str	r3, [r2, #24]
 8000420:	4b0e      	ldr	r3, [pc, #56]	; (800045c <MX_GPIO_Init+0x5c>)
 8000422:	699b      	ldr	r3, [r3, #24]
 8000424:	f003 0304 	and.w	r3, r3, #4
 8000428:	607b      	str	r3, [r7, #4]
 800042a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 800042c:	2200      	movs	r2, #0
 800042e:	2120      	movs	r1, #32
 8000430:	480b      	ldr	r0, [pc, #44]	; (8000460 <MX_GPIO_Init+0x60>)
 8000432:	f001 f821 	bl	8001478 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 8000436:	2320      	movs	r3, #32
 8000438:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800043a:	2301      	movs	r3, #1
 800043c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800043e:	2300      	movs	r3, #0
 8000440:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000442:	2302      	movs	r3, #2
 8000444:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8000446:	f107 0308 	add.w	r3, r7, #8
 800044a:	4619      	mov	r1, r3
 800044c:	4804      	ldr	r0, [pc, #16]	; (8000460 <MX_GPIO_Init+0x60>)
 800044e:	f000 fe99 	bl	8001184 <HAL_GPIO_Init>

}
 8000452:	bf00      	nop
 8000454:	3718      	adds	r7, #24
 8000456:	46bd      	mov	sp, r7
 8000458:	bd80      	pop	{r7, pc}
 800045a:	bf00      	nop
 800045c:	40021000 	.word	0x40021000
 8000460:	40010800 	.word	0x40010800

08000464 <command_parser_fsm>:

// UART FSM
enum CommunicationState {INIT, RST, AWAIT_OK, OK};
enum CommunicationState cState = INIT;

void command_parser_fsm(void) {
 8000464:	b580      	push	{r7, lr}
 8000466:	af00      	add	r7, sp, #0
	switch(pState) {
 8000468:	4b32      	ldr	r3, [pc, #200]	; (8000534 <command_parser_fsm+0xd0>)
 800046a:	781b      	ldrb	r3, [r3, #0]
 800046c:	2b02      	cmp	r3, #2
 800046e:	d01c      	beq.n	80004aa <command_parser_fsm+0x46>
 8000470:	2b02      	cmp	r3, #2
 8000472:	dc5d      	bgt.n	8000530 <command_parser_fsm+0xcc>
 8000474:	2b00      	cmp	r3, #0
 8000476:	d002      	beq.n	800047e <command_parser_fsm+0x1a>
 8000478:	2b01      	cmp	r3, #1
 800047a:	d03b      	beq.n	80004f4 <command_parser_fsm+0x90>
			index_buffer = 0;
			pState = AWAIT;
		}
		if(temp == '#') pState = VALIDATE;
	}
}
 800047c:	e058      	b.n	8000530 <command_parser_fsm+0xcc>
		if(temp == '!') {
 800047e:	4b2e      	ldr	r3, [pc, #184]	; (8000538 <command_parser_fsm+0xd4>)
 8000480:	781b      	ldrb	r3, [r3, #0]
 8000482:	2b21      	cmp	r3, #33	; 0x21
 8000484:	d153      	bne.n	800052e <command_parser_fsm+0xca>
			index_buffer = 0;
 8000486:	4b2d      	ldr	r3, [pc, #180]	; (800053c <command_parser_fsm+0xd8>)
 8000488:	2200      	movs	r2, #0
 800048a:	701a      	strb	r2, [r3, #0]
			buffer[index_buffer++] = temp;
 800048c:	4b2b      	ldr	r3, [pc, #172]	; (800053c <command_parser_fsm+0xd8>)
 800048e:	781b      	ldrb	r3, [r3, #0]
 8000490:	1c5a      	adds	r2, r3, #1
 8000492:	b2d1      	uxtb	r1, r2
 8000494:	4a29      	ldr	r2, [pc, #164]	; (800053c <command_parser_fsm+0xd8>)
 8000496:	7011      	strb	r1, [r2, #0]
 8000498:	461a      	mov	r2, r3
 800049a:	4b27      	ldr	r3, [pc, #156]	; (8000538 <command_parser_fsm+0xd4>)
 800049c:	7819      	ldrb	r1, [r3, #0]
 800049e:	4b28      	ldr	r3, [pc, #160]	; (8000540 <command_parser_fsm+0xdc>)
 80004a0:	5499      	strb	r1, [r3, r2]
			pState = PARSE;
 80004a2:	4b24      	ldr	r3, [pc, #144]	; (8000534 <command_parser_fsm+0xd0>)
 80004a4:	2201      	movs	r2, #1
 80004a6:	701a      	strb	r2, [r3, #0]
		break;
 80004a8:	e041      	b.n	800052e <command_parser_fsm+0xca>
		buffer[index_buffer] = '\0';
 80004aa:	4b24      	ldr	r3, [pc, #144]	; (800053c <command_parser_fsm+0xd8>)
 80004ac:	781b      	ldrb	r3, [r3, #0]
 80004ae:	461a      	mov	r2, r3
 80004b0:	4b23      	ldr	r3, [pc, #140]	; (8000540 <command_parser_fsm+0xdc>)
 80004b2:	2100      	movs	r1, #0
 80004b4:	5499      	strb	r1, [r3, r2]
		if(strcmp(buffer, command_ok) == 0) {
 80004b6:	4923      	ldr	r1, [pc, #140]	; (8000544 <command_parser_fsm+0xe0>)
 80004b8:	4821      	ldr	r0, [pc, #132]	; (8000540 <command_parser_fsm+0xdc>)
 80004ba:	f7ff fe47 	bl	800014c <strcmp>
 80004be:	4603      	mov	r3, r0
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	d109      	bne.n	80004d8 <command_parser_fsm+0x74>
			HAL_UART_Transmit(&huart2, newline, sizeof(newline), 1000);
 80004c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004c8:	2203      	movs	r2, #3
 80004ca:	491f      	ldr	r1, [pc, #124]	; (8000548 <command_parser_fsm+0xe4>)
 80004cc:	481f      	ldr	r0, [pc, #124]	; (800054c <command_parser_fsm+0xe8>)
 80004ce:	f001 ff5b 	bl	8002388 <HAL_UART_Transmit>
			cState = OK;
 80004d2:	4b1f      	ldr	r3, [pc, #124]	; (8000550 <command_parser_fsm+0xec>)
 80004d4:	2203      	movs	r2, #3
 80004d6:	701a      	strb	r2, [r3, #0]
		if(strcmp(buffer, command_rst) == 0) {
 80004d8:	491e      	ldr	r1, [pc, #120]	; (8000554 <command_parser_fsm+0xf0>)
 80004da:	4819      	ldr	r0, [pc, #100]	; (8000540 <command_parser_fsm+0xdc>)
 80004dc:	f7ff fe36 	bl	800014c <strcmp>
 80004e0:	4603      	mov	r3, r0
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d102      	bne.n	80004ec <command_parser_fsm+0x88>
			cState = RST;
 80004e6:	4b1a      	ldr	r3, [pc, #104]	; (8000550 <command_parser_fsm+0xec>)
 80004e8:	2201      	movs	r2, #1
 80004ea:	701a      	strb	r2, [r3, #0]
		pState = AWAIT;
 80004ec:	4b11      	ldr	r3, [pc, #68]	; (8000534 <command_parser_fsm+0xd0>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	701a      	strb	r2, [r3, #0]
		break;
 80004f2:	e01d      	b.n	8000530 <command_parser_fsm+0xcc>
		buffer[index_buffer++] = temp;
 80004f4:	4b11      	ldr	r3, [pc, #68]	; (800053c <command_parser_fsm+0xd8>)
 80004f6:	781b      	ldrb	r3, [r3, #0]
 80004f8:	1c5a      	adds	r2, r3, #1
 80004fa:	b2d1      	uxtb	r1, r2
 80004fc:	4a0f      	ldr	r2, [pc, #60]	; (800053c <command_parser_fsm+0xd8>)
 80004fe:	7011      	strb	r1, [r2, #0]
 8000500:	461a      	mov	r2, r3
 8000502:	4b0d      	ldr	r3, [pc, #52]	; (8000538 <command_parser_fsm+0xd4>)
 8000504:	7819      	ldrb	r1, [r3, #0]
 8000506:	4b0e      	ldr	r3, [pc, #56]	; (8000540 <command_parser_fsm+0xdc>)
 8000508:	5499      	strb	r1, [r3, r2]
		if(index_buffer >= MAX_BUFFER_SIZE) {
 800050a:	4b0c      	ldr	r3, [pc, #48]	; (800053c <command_parser_fsm+0xd8>)
 800050c:	781b      	ldrb	r3, [r3, #0]
 800050e:	2b1d      	cmp	r3, #29
 8000510:	d905      	bls.n	800051e <command_parser_fsm+0xba>
			index_buffer = 0;
 8000512:	4b0a      	ldr	r3, [pc, #40]	; (800053c <command_parser_fsm+0xd8>)
 8000514:	2200      	movs	r2, #0
 8000516:	701a      	strb	r2, [r3, #0]
			pState = AWAIT;
 8000518:	4b06      	ldr	r3, [pc, #24]	; (8000534 <command_parser_fsm+0xd0>)
 800051a:	2200      	movs	r2, #0
 800051c:	701a      	strb	r2, [r3, #0]
		if(temp == '#') pState = VALIDATE;
 800051e:	4b06      	ldr	r3, [pc, #24]	; (8000538 <command_parser_fsm+0xd4>)
 8000520:	781b      	ldrb	r3, [r3, #0]
 8000522:	2b23      	cmp	r3, #35	; 0x23
 8000524:	d104      	bne.n	8000530 <command_parser_fsm+0xcc>
 8000526:	4b03      	ldr	r3, [pc, #12]	; (8000534 <command_parser_fsm+0xd0>)
 8000528:	2202      	movs	r2, #2
 800052a:	701a      	strb	r2, [r3, #0]
}
 800052c:	e000      	b.n	8000530 <command_parser_fsm+0xcc>
		break;
 800052e:	bf00      	nop
}
 8000530:	bf00      	nop
 8000532:	bd80      	pop	{r7, pc}
 8000534:	2000004b 	.word	0x2000004b
 8000538:	20000048 	.word	0x20000048
 800053c:	20000049 	.word	0x20000049
 8000540:	20000088 	.word	0x20000088
 8000544:	20000000 	.word	0x20000000
 8000548:	20000018 	.word	0x20000018
 800054c:	200000f0 	.word	0x200000f0
 8000550:	2000004c 	.word	0x2000004c
 8000554:	20000008 	.word	0x20000008

08000558 <ADC_Transmit>:

void ADC_Transmit(void) {
 8000558:	b580      	push	{r7, lr}
 800055a:	b084      	sub	sp, #16
 800055c:	af00      	add	r7, sp, #0
	char second[11];
	itoa(ADC_value, second, 11);
 800055e:	4b18      	ldr	r3, [pc, #96]	; (80005c0 <ADC_Transmit+0x68>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	4618      	mov	r0, r3
 8000564:	1d3b      	adds	r3, r7, #4
 8000566:	220b      	movs	r2, #11
 8000568:	4619      	mov	r1, r3
 800056a:	f002 fd71 	bl	8003050 <itoa>
	second[strlen(second)] = '#';
 800056e:	1d3b      	adds	r3, r7, #4
 8000570:	4618      	mov	r0, r3
 8000572:	f7ff fdf5 	bl	8000160 <strlen>
 8000576:	4603      	mov	r3, r0
 8000578:	f107 0210 	add.w	r2, r7, #16
 800057c:	4413      	add	r3, r2
 800057e:	2223      	movs	r2, #35	; 0x23
 8000580:	f803 2c0c 	strb.w	r2, [r3, #-12]
	HAL_UART_Transmit(&huart2, command_adc, sizeof(command_adc), 1000);
 8000584:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000588:	2206      	movs	r2, #6
 800058a:	490e      	ldr	r1, [pc, #56]	; (80005c4 <ADC_Transmit+0x6c>)
 800058c:	480e      	ldr	r0, [pc, #56]	; (80005c8 <ADC_Transmit+0x70>)
 800058e:	f001 fefb 	bl	8002388 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*)second, strlen(second), 1000);
 8000592:	1d3b      	adds	r3, r7, #4
 8000594:	4618      	mov	r0, r3
 8000596:	f7ff fde3 	bl	8000160 <strlen>
 800059a:	4603      	mov	r3, r0
 800059c:	b29a      	uxth	r2, r3
 800059e:	1d39      	adds	r1, r7, #4
 80005a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005a4:	4808      	ldr	r0, [pc, #32]	; (80005c8 <ADC_Transmit+0x70>)
 80005a6:	f001 feef 	bl	8002388 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, newline, sizeof(newline), 1000);
 80005aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005ae:	2203      	movs	r2, #3
 80005b0:	4906      	ldr	r1, [pc, #24]	; (80005cc <ADC_Transmit+0x74>)
 80005b2:	4805      	ldr	r0, [pc, #20]	; (80005c8 <ADC_Transmit+0x70>)
 80005b4:	f001 fee8 	bl	8002388 <HAL_UART_Transmit>
}
 80005b8:	bf00      	nop
 80005ba:	3710      	adds	r7, #16
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	20000044 	.word	0x20000044
 80005c4:	20000010 	.word	0x20000010
 80005c8:	200000f0 	.word	0x200000f0
 80005cc:	20000018 	.word	0x20000018

080005d0 <uart_communication_fsm>:

void uart_communication_fsm(void) {
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
	switch (cState) {
 80005d4:	4b1b      	ldr	r3, [pc, #108]	; (8000644 <uart_communication_fsm+0x74>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	2b03      	cmp	r3, #3
 80005da:	d82d      	bhi.n	8000638 <uart_communication_fsm+0x68>
 80005dc:	a201      	add	r2, pc, #4	; (adr r2, 80005e4 <uart_communication_fsm+0x14>)
 80005de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005e2:	bf00      	nop
 80005e4:	08000639 	.word	0x08000639
 80005e8:	080005f5 	.word	0x080005f5
 80005ec:	08000623 	.word	0x08000623
 80005f0:	08000639 	.word	0x08000639
	case INIT:
		break;
	case RST:
		ADC_value = HAL_ADC_GetValue(&hadc1);
 80005f4:	4814      	ldr	r0, [pc, #80]	; (8000648 <uart_communication_fsm+0x78>)
 80005f6:	f000 fabf 	bl	8000b78 <HAL_ADC_GetValue>
 80005fa:	4603      	mov	r3, r0
 80005fc:	4a13      	ldr	r2, [pc, #76]	; (800064c <uart_communication_fsm+0x7c>)
 80005fe:	6013      	str	r3, [r2, #0]
		HAL_UART_Transmit(&huart2, newline, sizeof(newline), 1000);
 8000600:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000604:	2203      	movs	r2, #3
 8000606:	4912      	ldr	r1, [pc, #72]	; (8000650 <uart_communication_fsm+0x80>)
 8000608:	4812      	ldr	r0, [pc, #72]	; (8000654 <uart_communication_fsm+0x84>)
 800060a:	f001 febd 	bl	8002388 <HAL_UART_Transmit>
		ADC_Transmit();
 800060e:	f7ff ffa3 	bl	8000558 <ADC_Transmit>
		setTimer(300);
 8000612:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000616:	f000 f93b 	bl	8000890 <setTimer>
		cState = AWAIT_OK;
 800061a:	4b0a      	ldr	r3, [pc, #40]	; (8000644 <uart_communication_fsm+0x74>)
 800061c:	2202      	movs	r2, #2
 800061e:	701a      	strb	r2, [r3, #0]
		break;
 8000620:	e00d      	b.n	800063e <uart_communication_fsm+0x6e>
	case AWAIT_OK:
		if(flag == 1) {
 8000622:	4b0d      	ldr	r3, [pc, #52]	; (8000658 <uart_communication_fsm+0x88>)
 8000624:	781b      	ldrb	r3, [r3, #0]
 8000626:	2b01      	cmp	r3, #1
 8000628:	d108      	bne.n	800063c <uart_communication_fsm+0x6c>
			ADC_Transmit();
 800062a:	f7ff ff95 	bl	8000558 <ADC_Transmit>
			setTimer(300);
 800062e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000632:	f000 f92d 	bl	8000890 <setTimer>
		}
	case OK:
		break;
 8000636:	e001      	b.n	800063c <uart_communication_fsm+0x6c>
	default:
		break;
 8000638:	bf00      	nop
 800063a:	e000      	b.n	800063e <uart_communication_fsm+0x6e>
		break;
 800063c:	bf00      	nop
	}
}
 800063e:	bf00      	nop
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	2000004c 	.word	0x2000004c
 8000648:	20000058 	.word	0x20000058
 800064c:	20000044 	.word	0x20000044
 8000650:	20000018 	.word	0x20000018
 8000654:	200000f0 	.word	0x200000f0
 8000658:	20000054 	.word	0x20000054

0800065c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800065c:	b480      	push	{r7}
 800065e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000660:	b672      	cpsid	i
}
 8000662:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000664:	e7fe      	b.n	8000664 <Error_Handler+0x8>
	...

08000668 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000668:	b480      	push	{r7}
 800066a:	b085      	sub	sp, #20
 800066c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800066e:	4b15      	ldr	r3, [pc, #84]	; (80006c4 <HAL_MspInit+0x5c>)
 8000670:	699b      	ldr	r3, [r3, #24]
 8000672:	4a14      	ldr	r2, [pc, #80]	; (80006c4 <HAL_MspInit+0x5c>)
 8000674:	f043 0301 	orr.w	r3, r3, #1
 8000678:	6193      	str	r3, [r2, #24]
 800067a:	4b12      	ldr	r3, [pc, #72]	; (80006c4 <HAL_MspInit+0x5c>)
 800067c:	699b      	ldr	r3, [r3, #24]
 800067e:	f003 0301 	and.w	r3, r3, #1
 8000682:	60bb      	str	r3, [r7, #8]
 8000684:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000686:	4b0f      	ldr	r3, [pc, #60]	; (80006c4 <HAL_MspInit+0x5c>)
 8000688:	69db      	ldr	r3, [r3, #28]
 800068a:	4a0e      	ldr	r2, [pc, #56]	; (80006c4 <HAL_MspInit+0x5c>)
 800068c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000690:	61d3      	str	r3, [r2, #28]
 8000692:	4b0c      	ldr	r3, [pc, #48]	; (80006c4 <HAL_MspInit+0x5c>)
 8000694:	69db      	ldr	r3, [r3, #28]
 8000696:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800069a:	607b      	str	r3, [r7, #4]
 800069c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800069e:	4b0a      	ldr	r3, [pc, #40]	; (80006c8 <HAL_MspInit+0x60>)
 80006a0:	685b      	ldr	r3, [r3, #4]
 80006a2:	60fb      	str	r3, [r7, #12]
 80006a4:	68fb      	ldr	r3, [r7, #12]
 80006a6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80006aa:	60fb      	str	r3, [r7, #12]
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80006b2:	60fb      	str	r3, [r7, #12]
 80006b4:	4a04      	ldr	r2, [pc, #16]	; (80006c8 <HAL_MspInit+0x60>)
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006ba:	bf00      	nop
 80006bc:	3714      	adds	r7, #20
 80006be:	46bd      	mov	sp, r7
 80006c0:	bc80      	pop	{r7}
 80006c2:	4770      	bx	lr
 80006c4:	40021000 	.word	0x40021000
 80006c8:	40010000 	.word	0x40010000

080006cc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b088      	sub	sp, #32
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d4:	f107 0310 	add.w	r3, r7, #16
 80006d8:	2200      	movs	r2, #0
 80006da:	601a      	str	r2, [r3, #0]
 80006dc:	605a      	str	r2, [r3, #4]
 80006de:	609a      	str	r2, [r3, #8]
 80006e0:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	4a14      	ldr	r2, [pc, #80]	; (8000738 <HAL_ADC_MspInit+0x6c>)
 80006e8:	4293      	cmp	r3, r2
 80006ea:	d121      	bne.n	8000730 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80006ec:	4b13      	ldr	r3, [pc, #76]	; (800073c <HAL_ADC_MspInit+0x70>)
 80006ee:	699b      	ldr	r3, [r3, #24]
 80006f0:	4a12      	ldr	r2, [pc, #72]	; (800073c <HAL_ADC_MspInit+0x70>)
 80006f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80006f6:	6193      	str	r3, [r2, #24]
 80006f8:	4b10      	ldr	r3, [pc, #64]	; (800073c <HAL_ADC_MspInit+0x70>)
 80006fa:	699b      	ldr	r3, [r3, #24]
 80006fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000700:	60fb      	str	r3, [r7, #12]
 8000702:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000704:	4b0d      	ldr	r3, [pc, #52]	; (800073c <HAL_ADC_MspInit+0x70>)
 8000706:	699b      	ldr	r3, [r3, #24]
 8000708:	4a0c      	ldr	r2, [pc, #48]	; (800073c <HAL_ADC_MspInit+0x70>)
 800070a:	f043 0304 	orr.w	r3, r3, #4
 800070e:	6193      	str	r3, [r2, #24]
 8000710:	4b0a      	ldr	r3, [pc, #40]	; (800073c <HAL_ADC_MspInit+0x70>)
 8000712:	699b      	ldr	r3, [r3, #24]
 8000714:	f003 0304 	and.w	r3, r3, #4
 8000718:	60bb      	str	r3, [r7, #8]
 800071a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800071c:	2301      	movs	r3, #1
 800071e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000720:	2303      	movs	r3, #3
 8000722:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000724:	f107 0310 	add.w	r3, r7, #16
 8000728:	4619      	mov	r1, r3
 800072a:	4805      	ldr	r0, [pc, #20]	; (8000740 <HAL_ADC_MspInit+0x74>)
 800072c:	f000 fd2a 	bl	8001184 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000730:	bf00      	nop
 8000732:	3720      	adds	r7, #32
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}
 8000738:	40012400 	.word	0x40012400
 800073c:	40021000 	.word	0x40021000
 8000740:	40010800 	.word	0x40010800

08000744 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000744:	b480      	push	{r7}
 8000746:	b085      	sub	sp, #20
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000754:	d10b      	bne.n	800076e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000756:	4b08      	ldr	r3, [pc, #32]	; (8000778 <HAL_TIM_Base_MspInit+0x34>)
 8000758:	69db      	ldr	r3, [r3, #28]
 800075a:	4a07      	ldr	r2, [pc, #28]	; (8000778 <HAL_TIM_Base_MspInit+0x34>)
 800075c:	f043 0301 	orr.w	r3, r3, #1
 8000760:	61d3      	str	r3, [r2, #28]
 8000762:	4b05      	ldr	r3, [pc, #20]	; (8000778 <HAL_TIM_Base_MspInit+0x34>)
 8000764:	69db      	ldr	r3, [r3, #28]
 8000766:	f003 0301 	and.w	r3, r3, #1
 800076a:	60fb      	str	r3, [r7, #12]
 800076c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800076e:	bf00      	nop
 8000770:	3714      	adds	r7, #20
 8000772:	46bd      	mov	sp, r7
 8000774:	bc80      	pop	{r7}
 8000776:	4770      	bx	lr
 8000778:	40021000 	.word	0x40021000

0800077c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b088      	sub	sp, #32
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000784:	f107 0310 	add.w	r3, r7, #16
 8000788:	2200      	movs	r2, #0
 800078a:	601a      	str	r2, [r3, #0]
 800078c:	605a      	str	r2, [r3, #4]
 800078e:	609a      	str	r2, [r3, #8]
 8000790:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	4a1f      	ldr	r2, [pc, #124]	; (8000814 <HAL_UART_MspInit+0x98>)
 8000798:	4293      	cmp	r3, r2
 800079a:	d137      	bne.n	800080c <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800079c:	4b1e      	ldr	r3, [pc, #120]	; (8000818 <HAL_UART_MspInit+0x9c>)
 800079e:	69db      	ldr	r3, [r3, #28]
 80007a0:	4a1d      	ldr	r2, [pc, #116]	; (8000818 <HAL_UART_MspInit+0x9c>)
 80007a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007a6:	61d3      	str	r3, [r2, #28]
 80007a8:	4b1b      	ldr	r3, [pc, #108]	; (8000818 <HAL_UART_MspInit+0x9c>)
 80007aa:	69db      	ldr	r3, [r3, #28]
 80007ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007b0:	60fb      	str	r3, [r7, #12]
 80007b2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b4:	4b18      	ldr	r3, [pc, #96]	; (8000818 <HAL_UART_MspInit+0x9c>)
 80007b6:	699b      	ldr	r3, [r3, #24]
 80007b8:	4a17      	ldr	r2, [pc, #92]	; (8000818 <HAL_UART_MspInit+0x9c>)
 80007ba:	f043 0304 	orr.w	r3, r3, #4
 80007be:	6193      	str	r3, [r2, #24]
 80007c0:	4b15      	ldr	r3, [pc, #84]	; (8000818 <HAL_UART_MspInit+0x9c>)
 80007c2:	699b      	ldr	r3, [r3, #24]
 80007c4:	f003 0304 	and.w	r3, r3, #4
 80007c8:	60bb      	str	r3, [r7, #8]
 80007ca:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80007cc:	2304      	movs	r3, #4
 80007ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007d0:	2302      	movs	r3, #2
 80007d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007d4:	2303      	movs	r3, #3
 80007d6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007d8:	f107 0310 	add.w	r3, r7, #16
 80007dc:	4619      	mov	r1, r3
 80007de:	480f      	ldr	r0, [pc, #60]	; (800081c <HAL_UART_MspInit+0xa0>)
 80007e0:	f000 fcd0 	bl	8001184 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80007e4:	2308      	movs	r3, #8
 80007e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007e8:	2300      	movs	r3, #0
 80007ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ec:	2300      	movs	r3, #0
 80007ee:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007f0:	f107 0310 	add.w	r3, r7, #16
 80007f4:	4619      	mov	r1, r3
 80007f6:	4809      	ldr	r0, [pc, #36]	; (800081c <HAL_UART_MspInit+0xa0>)
 80007f8:	f000 fcc4 	bl	8001184 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80007fc:	2200      	movs	r2, #0
 80007fe:	2100      	movs	r1, #0
 8000800:	2026      	movs	r0, #38	; 0x26
 8000802:	f000 fbd6 	bl	8000fb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000806:	2026      	movs	r0, #38	; 0x26
 8000808:	f000 fbef 	bl	8000fea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800080c:	bf00      	nop
 800080e:	3720      	adds	r7, #32
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	40004400 	.word	0x40004400
 8000818:	40021000 	.word	0x40021000
 800081c:	40010800 	.word	0x40010800

08000820 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000824:	e7fe      	b.n	8000824 <NMI_Handler+0x4>

08000826 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000826:	b480      	push	{r7}
 8000828:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800082a:	e7fe      	b.n	800082a <HardFault_Handler+0x4>

0800082c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000830:	e7fe      	b.n	8000830 <MemManage_Handler+0x4>

08000832 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000832:	b480      	push	{r7}
 8000834:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000836:	e7fe      	b.n	8000836 <BusFault_Handler+0x4>

08000838 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800083c:	e7fe      	b.n	800083c <UsageFault_Handler+0x4>

0800083e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800083e:	b480      	push	{r7}
 8000840:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000842:	bf00      	nop
 8000844:	46bd      	mov	sp, r7
 8000846:	bc80      	pop	{r7}
 8000848:	4770      	bx	lr

0800084a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800084a:	b480      	push	{r7}
 800084c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800084e:	bf00      	nop
 8000850:	46bd      	mov	sp, r7
 8000852:	bc80      	pop	{r7}
 8000854:	4770      	bx	lr

08000856 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000856:	b480      	push	{r7}
 8000858:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800085a:	bf00      	nop
 800085c:	46bd      	mov	sp, r7
 800085e:	bc80      	pop	{r7}
 8000860:	4770      	bx	lr

08000862 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000862:	b580      	push	{r7, lr}
 8000864:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000866:	f000 f893 	bl	8000990 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800086a:	bf00      	nop
 800086c:	bd80      	pop	{r7, pc}
	...

08000870 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000874:	4802      	ldr	r0, [pc, #8]	; (8000880 <USART2_IRQHandler+0x10>)
 8000876:	f001 fe2f 	bl	80024d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800087a:	bf00      	nop
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	200000f0 	.word	0x200000f0

08000884 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000888:	bf00      	nop
 800088a:	46bd      	mov	sp, r7
 800088c:	bc80      	pop	{r7}
 800088e:	4770      	bx	lr

08000890 <setTimer>:
#include "timer.h"

uint32_t counter= 0;
uint8_t flag = 0;

void setTimer(uint32_t duration) {
 8000890:	b480      	push	{r7}
 8000892:	b083      	sub	sp, #12
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
	counter = duration;
 8000898:	4a05      	ldr	r2, [pc, #20]	; (80008b0 <setTimer+0x20>)
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	6013      	str	r3, [r2, #0]
	flag = 0;
 800089e:	4b05      	ldr	r3, [pc, #20]	; (80008b4 <setTimer+0x24>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	701a      	strb	r2, [r3, #0]
}
 80008a4:	bf00      	nop
 80008a6:	370c      	adds	r7, #12
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bc80      	pop	{r7}
 80008ac:	4770      	bx	lr
 80008ae:	bf00      	nop
 80008b0:	20000050 	.word	0x20000050
 80008b4:	20000054 	.word	0x20000054

080008b8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80008b8:	f7ff ffe4 	bl	8000884 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008bc:	480b      	ldr	r0, [pc, #44]	; (80008ec <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80008be:	490c      	ldr	r1, [pc, #48]	; (80008f0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80008c0:	4a0c      	ldr	r2, [pc, #48]	; (80008f4 <LoopFillZerobss+0x16>)
  movs r3, #0
 80008c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008c4:	e002      	b.n	80008cc <LoopCopyDataInit>

080008c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008ca:	3304      	adds	r3, #4

080008cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008d0:	d3f9      	bcc.n	80008c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008d2:	4a09      	ldr	r2, [pc, #36]	; (80008f8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80008d4:	4c09      	ldr	r4, [pc, #36]	; (80008fc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80008d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008d8:	e001      	b.n	80008de <LoopFillZerobss>

080008da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008dc:	3204      	adds	r2, #4

080008de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008e0:	d3fb      	bcc.n	80008da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008e2:	f002 fb79 	bl	8002fd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008e6:	f7ff fc61 	bl	80001ac <main>
  bx lr
 80008ea:	4770      	bx	lr
  ldr r0, =_sdata
 80008ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008f0:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 80008f4:	08003158 	.word	0x08003158
  ldr r2, =_sbss
 80008f8:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 80008fc:	2000013c 	.word	0x2000013c

08000900 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000900:	e7fe      	b.n	8000900 <ADC1_2_IRQHandler>
	...

08000904 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000908:	4b08      	ldr	r3, [pc, #32]	; (800092c <HAL_Init+0x28>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4a07      	ldr	r2, [pc, #28]	; (800092c <HAL_Init+0x28>)
 800090e:	f043 0310 	orr.w	r3, r3, #16
 8000912:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000914:	2003      	movs	r0, #3
 8000916:	f000 fb41 	bl	8000f9c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800091a:	200f      	movs	r0, #15
 800091c:	f000 f808 	bl	8000930 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000920:	f7ff fea2 	bl	8000668 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000924:	2300      	movs	r3, #0
}
 8000926:	4618      	mov	r0, r3
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	40022000 	.word	0x40022000

08000930 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000938:	4b12      	ldr	r3, [pc, #72]	; (8000984 <HAL_InitTick+0x54>)
 800093a:	681a      	ldr	r2, [r3, #0]
 800093c:	4b12      	ldr	r3, [pc, #72]	; (8000988 <HAL_InitTick+0x58>)
 800093e:	781b      	ldrb	r3, [r3, #0]
 8000940:	4619      	mov	r1, r3
 8000942:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000946:	fbb3 f3f1 	udiv	r3, r3, r1
 800094a:	fbb2 f3f3 	udiv	r3, r2, r3
 800094e:	4618      	mov	r0, r3
 8000950:	f000 fb59 	bl	8001006 <HAL_SYSTICK_Config>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800095a:	2301      	movs	r3, #1
 800095c:	e00e      	b.n	800097c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	2b0f      	cmp	r3, #15
 8000962:	d80a      	bhi.n	800097a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000964:	2200      	movs	r2, #0
 8000966:	6879      	ldr	r1, [r7, #4]
 8000968:	f04f 30ff 	mov.w	r0, #4294967295
 800096c:	f000 fb21 	bl	8000fb2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000970:	4a06      	ldr	r2, [pc, #24]	; (800098c <HAL_InitTick+0x5c>)
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000976:	2300      	movs	r3, #0
 8000978:	e000      	b.n	800097c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800097a:	2301      	movs	r3, #1
}
 800097c:	4618      	mov	r0, r3
 800097e:	3708      	adds	r7, #8
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}
 8000984:	2000001c 	.word	0x2000001c
 8000988:	20000024 	.word	0x20000024
 800098c:	20000020 	.word	0x20000020

08000990 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000994:	4b05      	ldr	r3, [pc, #20]	; (80009ac <HAL_IncTick+0x1c>)
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	461a      	mov	r2, r3
 800099a:	4b05      	ldr	r3, [pc, #20]	; (80009b0 <HAL_IncTick+0x20>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	4413      	add	r3, r2
 80009a0:	4a03      	ldr	r2, [pc, #12]	; (80009b0 <HAL_IncTick+0x20>)
 80009a2:	6013      	str	r3, [r2, #0]
}
 80009a4:	bf00      	nop
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bc80      	pop	{r7}
 80009aa:	4770      	bx	lr
 80009ac:	20000024 	.word	0x20000024
 80009b0:	20000138 	.word	0x20000138

080009b4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  return uwTick;
 80009b8:	4b02      	ldr	r3, [pc, #8]	; (80009c4 <HAL_GetTick+0x10>)
 80009ba:	681b      	ldr	r3, [r3, #0]
}
 80009bc:	4618      	mov	r0, r3
 80009be:	46bd      	mov	sp, r7
 80009c0:	bc80      	pop	{r7}
 80009c2:	4770      	bx	lr
 80009c4:	20000138 	.word	0x20000138

080009c8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b086      	sub	sp, #24
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80009d0:	2300      	movs	r3, #0
 80009d2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80009d4:	2300      	movs	r3, #0
 80009d6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80009d8:	2300      	movs	r3, #0
 80009da:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80009dc:	2300      	movs	r3, #0
 80009de:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d101      	bne.n	80009ea <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80009e6:	2301      	movs	r3, #1
 80009e8:	e0be      	b.n	8000b68 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	689b      	ldr	r3, [r3, #8]
 80009ee:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d109      	bne.n	8000a0c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	2200      	movs	r2, #0
 80009fc:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	2200      	movs	r2, #0
 8000a02:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000a06:	6878      	ldr	r0, [r7, #4]
 8000a08:	f7ff fe60 	bl	80006cc <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000a0c:	6878      	ldr	r0, [r7, #4]
 8000a0e:	f000 f9b7 	bl	8000d80 <ADC_ConversionStop_Disable>
 8000a12:	4603      	mov	r3, r0
 8000a14:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a1a:	f003 0310 	and.w	r3, r3, #16
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	f040 8099 	bne.w	8000b56 <HAL_ADC_Init+0x18e>
 8000a24:	7dfb      	ldrb	r3, [r7, #23]
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	f040 8095 	bne.w	8000b56 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a30:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000a34:	f023 0302 	bic.w	r3, r3, #2
 8000a38:	f043 0202 	orr.w	r2, r3, #2
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000a48:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	7b1b      	ldrb	r3, [r3, #12]
 8000a4e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000a50:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000a52:	68ba      	ldr	r2, [r7, #8]
 8000a54:	4313      	orrs	r3, r2
 8000a56:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	689b      	ldr	r3, [r3, #8]
 8000a5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000a60:	d003      	beq.n	8000a6a <HAL_ADC_Init+0xa2>
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	689b      	ldr	r3, [r3, #8]
 8000a66:	2b01      	cmp	r3, #1
 8000a68:	d102      	bne.n	8000a70 <HAL_ADC_Init+0xa8>
 8000a6a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a6e:	e000      	b.n	8000a72 <HAL_ADC_Init+0xaa>
 8000a70:	2300      	movs	r3, #0
 8000a72:	693a      	ldr	r2, [r7, #16]
 8000a74:	4313      	orrs	r3, r2
 8000a76:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	7d1b      	ldrb	r3, [r3, #20]
 8000a7c:	2b01      	cmp	r3, #1
 8000a7e:	d119      	bne.n	8000ab4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	7b1b      	ldrb	r3, [r3, #12]
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d109      	bne.n	8000a9c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	699b      	ldr	r3, [r3, #24]
 8000a8c:	3b01      	subs	r3, #1
 8000a8e:	035a      	lsls	r2, r3, #13
 8000a90:	693b      	ldr	r3, [r7, #16]
 8000a92:	4313      	orrs	r3, r2
 8000a94:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000a98:	613b      	str	r3, [r7, #16]
 8000a9a:	e00b      	b.n	8000ab4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000aa0:	f043 0220 	orr.w	r2, r3, #32
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000aac:	f043 0201 	orr.w	r2, r3, #1
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	685b      	ldr	r3, [r3, #4]
 8000aba:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	693a      	ldr	r2, [r7, #16]
 8000ac4:	430a      	orrs	r2, r1
 8000ac6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	689a      	ldr	r2, [r3, #8]
 8000ace:	4b28      	ldr	r3, [pc, #160]	; (8000b70 <HAL_ADC_Init+0x1a8>)
 8000ad0:	4013      	ands	r3, r2
 8000ad2:	687a      	ldr	r2, [r7, #4]
 8000ad4:	6812      	ldr	r2, [r2, #0]
 8000ad6:	68b9      	ldr	r1, [r7, #8]
 8000ad8:	430b      	orrs	r3, r1
 8000ada:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	689b      	ldr	r3, [r3, #8]
 8000ae0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000ae4:	d003      	beq.n	8000aee <HAL_ADC_Init+0x126>
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	689b      	ldr	r3, [r3, #8]
 8000aea:	2b01      	cmp	r3, #1
 8000aec:	d104      	bne.n	8000af8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	691b      	ldr	r3, [r3, #16]
 8000af2:	3b01      	subs	r3, #1
 8000af4:	051b      	lsls	r3, r3, #20
 8000af6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000afe:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	68fa      	ldr	r2, [r7, #12]
 8000b08:	430a      	orrs	r2, r1
 8000b0a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	689a      	ldr	r2, [r3, #8]
 8000b12:	4b18      	ldr	r3, [pc, #96]	; (8000b74 <HAL_ADC_Init+0x1ac>)
 8000b14:	4013      	ands	r3, r2
 8000b16:	68ba      	ldr	r2, [r7, #8]
 8000b18:	429a      	cmp	r2, r3
 8000b1a:	d10b      	bne.n	8000b34 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	2200      	movs	r2, #0
 8000b20:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b26:	f023 0303 	bic.w	r3, r3, #3
 8000b2a:	f043 0201 	orr.w	r2, r3, #1
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000b32:	e018      	b.n	8000b66 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b38:	f023 0312 	bic.w	r3, r3, #18
 8000b3c:	f043 0210 	orr.w	r2, r3, #16
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b48:	f043 0201 	orr.w	r2, r3, #1
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000b50:	2301      	movs	r3, #1
 8000b52:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000b54:	e007      	b.n	8000b66 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b5a:	f043 0210 	orr.w	r2, r3, #16
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000b62:	2301      	movs	r3, #1
 8000b64:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000b66:	7dfb      	ldrb	r3, [r7, #23]
}
 8000b68:	4618      	mov	r0, r3
 8000b6a:	3718      	adds	r7, #24
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	ffe1f7fd 	.word	0xffe1f7fd
 8000b74:	ff1f0efe 	.word	0xff1f0efe

08000b78 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b083      	sub	sp, #12
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	370c      	adds	r7, #12
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bc80      	pop	{r7}
 8000b8e:	4770      	bx	lr

08000b90 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000b90:	b480      	push	{r7}
 8000b92:	b085      	sub	sp, #20
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
 8000b98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000ba8:	2b01      	cmp	r3, #1
 8000baa:	d101      	bne.n	8000bb0 <HAL_ADC_ConfigChannel+0x20>
 8000bac:	2302      	movs	r3, #2
 8000bae:	e0dc      	b.n	8000d6a <HAL_ADC_ConfigChannel+0x1da>
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	685b      	ldr	r3, [r3, #4]
 8000bbc:	2b06      	cmp	r3, #6
 8000bbe:	d81c      	bhi.n	8000bfa <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	685a      	ldr	r2, [r3, #4]
 8000bca:	4613      	mov	r3, r2
 8000bcc:	009b      	lsls	r3, r3, #2
 8000bce:	4413      	add	r3, r2
 8000bd0:	3b05      	subs	r3, #5
 8000bd2:	221f      	movs	r2, #31
 8000bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd8:	43db      	mvns	r3, r3
 8000bda:	4019      	ands	r1, r3
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	6818      	ldr	r0, [r3, #0]
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	685a      	ldr	r2, [r3, #4]
 8000be4:	4613      	mov	r3, r2
 8000be6:	009b      	lsls	r3, r3, #2
 8000be8:	4413      	add	r3, r2
 8000bea:	3b05      	subs	r3, #5
 8000bec:	fa00 f203 	lsl.w	r2, r0, r3
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	430a      	orrs	r2, r1
 8000bf6:	635a      	str	r2, [r3, #52]	; 0x34
 8000bf8:	e03c      	b.n	8000c74 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	685b      	ldr	r3, [r3, #4]
 8000bfe:	2b0c      	cmp	r3, #12
 8000c00:	d81c      	bhi.n	8000c3c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	685a      	ldr	r2, [r3, #4]
 8000c0c:	4613      	mov	r3, r2
 8000c0e:	009b      	lsls	r3, r3, #2
 8000c10:	4413      	add	r3, r2
 8000c12:	3b23      	subs	r3, #35	; 0x23
 8000c14:	221f      	movs	r2, #31
 8000c16:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1a:	43db      	mvns	r3, r3
 8000c1c:	4019      	ands	r1, r3
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	6818      	ldr	r0, [r3, #0]
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	685a      	ldr	r2, [r3, #4]
 8000c26:	4613      	mov	r3, r2
 8000c28:	009b      	lsls	r3, r3, #2
 8000c2a:	4413      	add	r3, r2
 8000c2c:	3b23      	subs	r3, #35	; 0x23
 8000c2e:	fa00 f203 	lsl.w	r2, r0, r3
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	430a      	orrs	r2, r1
 8000c38:	631a      	str	r2, [r3, #48]	; 0x30
 8000c3a:	e01b      	b.n	8000c74 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	685a      	ldr	r2, [r3, #4]
 8000c46:	4613      	mov	r3, r2
 8000c48:	009b      	lsls	r3, r3, #2
 8000c4a:	4413      	add	r3, r2
 8000c4c:	3b41      	subs	r3, #65	; 0x41
 8000c4e:	221f      	movs	r2, #31
 8000c50:	fa02 f303 	lsl.w	r3, r2, r3
 8000c54:	43db      	mvns	r3, r3
 8000c56:	4019      	ands	r1, r3
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	6818      	ldr	r0, [r3, #0]
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	685a      	ldr	r2, [r3, #4]
 8000c60:	4613      	mov	r3, r2
 8000c62:	009b      	lsls	r3, r3, #2
 8000c64:	4413      	add	r3, r2
 8000c66:	3b41      	subs	r3, #65	; 0x41
 8000c68:	fa00 f203 	lsl.w	r2, r0, r3
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	430a      	orrs	r2, r1
 8000c72:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	2b09      	cmp	r3, #9
 8000c7a:	d91c      	bls.n	8000cb6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	68d9      	ldr	r1, [r3, #12]
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	681a      	ldr	r2, [r3, #0]
 8000c86:	4613      	mov	r3, r2
 8000c88:	005b      	lsls	r3, r3, #1
 8000c8a:	4413      	add	r3, r2
 8000c8c:	3b1e      	subs	r3, #30
 8000c8e:	2207      	movs	r2, #7
 8000c90:	fa02 f303 	lsl.w	r3, r2, r3
 8000c94:	43db      	mvns	r3, r3
 8000c96:	4019      	ands	r1, r3
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	6898      	ldr	r0, [r3, #8]
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	681a      	ldr	r2, [r3, #0]
 8000ca0:	4613      	mov	r3, r2
 8000ca2:	005b      	lsls	r3, r3, #1
 8000ca4:	4413      	add	r3, r2
 8000ca6:	3b1e      	subs	r3, #30
 8000ca8:	fa00 f203 	lsl.w	r2, r0, r3
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	430a      	orrs	r2, r1
 8000cb2:	60da      	str	r2, [r3, #12]
 8000cb4:	e019      	b.n	8000cea <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	6919      	ldr	r1, [r3, #16]
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	681a      	ldr	r2, [r3, #0]
 8000cc0:	4613      	mov	r3, r2
 8000cc2:	005b      	lsls	r3, r3, #1
 8000cc4:	4413      	add	r3, r2
 8000cc6:	2207      	movs	r2, #7
 8000cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ccc:	43db      	mvns	r3, r3
 8000cce:	4019      	ands	r1, r3
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	6898      	ldr	r0, [r3, #8]
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	681a      	ldr	r2, [r3, #0]
 8000cd8:	4613      	mov	r3, r2
 8000cda:	005b      	lsls	r3, r3, #1
 8000cdc:	4413      	add	r3, r2
 8000cde:	fa00 f203 	lsl.w	r2, r0, r3
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	430a      	orrs	r2, r1
 8000ce8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	2b10      	cmp	r3, #16
 8000cf0:	d003      	beq.n	8000cfa <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000cf6:	2b11      	cmp	r3, #17
 8000cf8:	d132      	bne.n	8000d60 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	4a1d      	ldr	r2, [pc, #116]	; (8000d74 <HAL_ADC_ConfigChannel+0x1e4>)
 8000d00:	4293      	cmp	r3, r2
 8000d02:	d125      	bne.n	8000d50 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	689b      	ldr	r3, [r3, #8]
 8000d0a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d126      	bne.n	8000d60 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	689a      	ldr	r2, [r3, #8]
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000d20:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	2b10      	cmp	r3, #16
 8000d28:	d11a      	bne.n	8000d60 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000d2a:	4b13      	ldr	r3, [pc, #76]	; (8000d78 <HAL_ADC_ConfigChannel+0x1e8>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	4a13      	ldr	r2, [pc, #76]	; (8000d7c <HAL_ADC_ConfigChannel+0x1ec>)
 8000d30:	fba2 2303 	umull	r2, r3, r2, r3
 8000d34:	0c9a      	lsrs	r2, r3, #18
 8000d36:	4613      	mov	r3, r2
 8000d38:	009b      	lsls	r3, r3, #2
 8000d3a:	4413      	add	r3, r2
 8000d3c:	005b      	lsls	r3, r3, #1
 8000d3e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000d40:	e002      	b.n	8000d48 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000d42:	68bb      	ldr	r3, [r7, #8]
 8000d44:	3b01      	subs	r3, #1
 8000d46:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000d48:	68bb      	ldr	r3, [r7, #8]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d1f9      	bne.n	8000d42 <HAL_ADC_ConfigChannel+0x1b2>
 8000d4e:	e007      	b.n	8000d60 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d54:	f043 0220 	orr.w	r2, r3, #32
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	2200      	movs	r2, #0
 8000d64:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000d68:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	3714      	adds	r7, #20
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bc80      	pop	{r7}
 8000d72:	4770      	bx	lr
 8000d74:	40012400 	.word	0x40012400
 8000d78:	2000001c 	.word	0x2000001c
 8000d7c:	431bde83 	.word	0x431bde83

08000d80 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b084      	sub	sp, #16
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	689b      	ldr	r3, [r3, #8]
 8000d92:	f003 0301 	and.w	r3, r3, #1
 8000d96:	2b01      	cmp	r3, #1
 8000d98:	d12e      	bne.n	8000df8 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	689a      	ldr	r2, [r3, #8]
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	f022 0201 	bic.w	r2, r2, #1
 8000da8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000daa:	f7ff fe03 	bl	80009b4 <HAL_GetTick>
 8000dae:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000db0:	e01b      	b.n	8000dea <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000db2:	f7ff fdff 	bl	80009b4 <HAL_GetTick>
 8000db6:	4602      	mov	r2, r0
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	1ad3      	subs	r3, r2, r3
 8000dbc:	2b02      	cmp	r3, #2
 8000dbe:	d914      	bls.n	8000dea <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	689b      	ldr	r3, [r3, #8]
 8000dc6:	f003 0301 	and.w	r3, r3, #1
 8000dca:	2b01      	cmp	r3, #1
 8000dcc:	d10d      	bne.n	8000dea <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dd2:	f043 0210 	orr.w	r2, r3, #16
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dde:	f043 0201 	orr.w	r2, r3, #1
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8000de6:	2301      	movs	r3, #1
 8000de8:	e007      	b.n	8000dfa <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	689b      	ldr	r3, [r3, #8]
 8000df0:	f003 0301 	and.w	r3, r3, #1
 8000df4:	2b01      	cmp	r3, #1
 8000df6:	d0dc      	beq.n	8000db2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000df8:	2300      	movs	r3, #0
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	3710      	adds	r7, #16
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
	...

08000e04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b085      	sub	sp, #20
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	f003 0307 	and.w	r3, r3, #7
 8000e12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e14:	4b0c      	ldr	r3, [pc, #48]	; (8000e48 <__NVIC_SetPriorityGrouping+0x44>)
 8000e16:	68db      	ldr	r3, [r3, #12]
 8000e18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e1a:	68ba      	ldr	r2, [r7, #8]
 8000e1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e20:	4013      	ands	r3, r2
 8000e22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e28:	68bb      	ldr	r3, [r7, #8]
 8000e2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e36:	4a04      	ldr	r2, [pc, #16]	; (8000e48 <__NVIC_SetPriorityGrouping+0x44>)
 8000e38:	68bb      	ldr	r3, [r7, #8]
 8000e3a:	60d3      	str	r3, [r2, #12]
}
 8000e3c:	bf00      	nop
 8000e3e:	3714      	adds	r7, #20
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bc80      	pop	{r7}
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop
 8000e48:	e000ed00 	.word	0xe000ed00

08000e4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e50:	4b04      	ldr	r3, [pc, #16]	; (8000e64 <__NVIC_GetPriorityGrouping+0x18>)
 8000e52:	68db      	ldr	r3, [r3, #12]
 8000e54:	0a1b      	lsrs	r3, r3, #8
 8000e56:	f003 0307 	and.w	r3, r3, #7
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bc80      	pop	{r7}
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop
 8000e64:	e000ed00 	.word	0xe000ed00

08000e68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b083      	sub	sp, #12
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	4603      	mov	r3, r0
 8000e70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	db0b      	blt.n	8000e92 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e7a:	79fb      	ldrb	r3, [r7, #7]
 8000e7c:	f003 021f 	and.w	r2, r3, #31
 8000e80:	4906      	ldr	r1, [pc, #24]	; (8000e9c <__NVIC_EnableIRQ+0x34>)
 8000e82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e86:	095b      	lsrs	r3, r3, #5
 8000e88:	2001      	movs	r0, #1
 8000e8a:	fa00 f202 	lsl.w	r2, r0, r2
 8000e8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e92:	bf00      	nop
 8000e94:	370c      	adds	r7, #12
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bc80      	pop	{r7}
 8000e9a:	4770      	bx	lr
 8000e9c:	e000e100 	.word	0xe000e100

08000ea0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b083      	sub	sp, #12
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	6039      	str	r1, [r7, #0]
 8000eaa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	db0a      	blt.n	8000eca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	b2da      	uxtb	r2, r3
 8000eb8:	490c      	ldr	r1, [pc, #48]	; (8000eec <__NVIC_SetPriority+0x4c>)
 8000eba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ebe:	0112      	lsls	r2, r2, #4
 8000ec0:	b2d2      	uxtb	r2, r2
 8000ec2:	440b      	add	r3, r1
 8000ec4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ec8:	e00a      	b.n	8000ee0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	b2da      	uxtb	r2, r3
 8000ece:	4908      	ldr	r1, [pc, #32]	; (8000ef0 <__NVIC_SetPriority+0x50>)
 8000ed0:	79fb      	ldrb	r3, [r7, #7]
 8000ed2:	f003 030f 	and.w	r3, r3, #15
 8000ed6:	3b04      	subs	r3, #4
 8000ed8:	0112      	lsls	r2, r2, #4
 8000eda:	b2d2      	uxtb	r2, r2
 8000edc:	440b      	add	r3, r1
 8000ede:	761a      	strb	r2, [r3, #24]
}
 8000ee0:	bf00      	nop
 8000ee2:	370c      	adds	r7, #12
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bc80      	pop	{r7}
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	e000e100 	.word	0xe000e100
 8000ef0:	e000ed00 	.word	0xe000ed00

08000ef4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b089      	sub	sp, #36	; 0x24
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	60f8      	str	r0, [r7, #12]
 8000efc:	60b9      	str	r1, [r7, #8]
 8000efe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	f003 0307 	and.w	r3, r3, #7
 8000f06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f08:	69fb      	ldr	r3, [r7, #28]
 8000f0a:	f1c3 0307 	rsb	r3, r3, #7
 8000f0e:	2b04      	cmp	r3, #4
 8000f10:	bf28      	it	cs
 8000f12:	2304      	movcs	r3, #4
 8000f14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	3304      	adds	r3, #4
 8000f1a:	2b06      	cmp	r3, #6
 8000f1c:	d902      	bls.n	8000f24 <NVIC_EncodePriority+0x30>
 8000f1e:	69fb      	ldr	r3, [r7, #28]
 8000f20:	3b03      	subs	r3, #3
 8000f22:	e000      	b.n	8000f26 <NVIC_EncodePriority+0x32>
 8000f24:	2300      	movs	r3, #0
 8000f26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f28:	f04f 32ff 	mov.w	r2, #4294967295
 8000f2c:	69bb      	ldr	r3, [r7, #24]
 8000f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f32:	43da      	mvns	r2, r3
 8000f34:	68bb      	ldr	r3, [r7, #8]
 8000f36:	401a      	ands	r2, r3
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f3c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	fa01 f303 	lsl.w	r3, r1, r3
 8000f46:	43d9      	mvns	r1, r3
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f4c:	4313      	orrs	r3, r2
         );
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	3724      	adds	r7, #36	; 0x24
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bc80      	pop	{r7}
 8000f56:	4770      	bx	lr

08000f58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	3b01      	subs	r3, #1
 8000f64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f68:	d301      	bcc.n	8000f6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	e00f      	b.n	8000f8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f6e:	4a0a      	ldr	r2, [pc, #40]	; (8000f98 <SysTick_Config+0x40>)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	3b01      	subs	r3, #1
 8000f74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f76:	210f      	movs	r1, #15
 8000f78:	f04f 30ff 	mov.w	r0, #4294967295
 8000f7c:	f7ff ff90 	bl	8000ea0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f80:	4b05      	ldr	r3, [pc, #20]	; (8000f98 <SysTick_Config+0x40>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f86:	4b04      	ldr	r3, [pc, #16]	; (8000f98 <SysTick_Config+0x40>)
 8000f88:	2207      	movs	r2, #7
 8000f8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f8c:	2300      	movs	r3, #0
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	3708      	adds	r7, #8
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	e000e010 	.word	0xe000e010

08000f9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fa4:	6878      	ldr	r0, [r7, #4]
 8000fa6:	f7ff ff2d 	bl	8000e04 <__NVIC_SetPriorityGrouping>
}
 8000faa:	bf00      	nop
 8000fac:	3708      	adds	r7, #8
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}

08000fb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fb2:	b580      	push	{r7, lr}
 8000fb4:	b086      	sub	sp, #24
 8000fb6:	af00      	add	r7, sp, #0
 8000fb8:	4603      	mov	r3, r0
 8000fba:	60b9      	str	r1, [r7, #8]
 8000fbc:	607a      	str	r2, [r7, #4]
 8000fbe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fc4:	f7ff ff42 	bl	8000e4c <__NVIC_GetPriorityGrouping>
 8000fc8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fca:	687a      	ldr	r2, [r7, #4]
 8000fcc:	68b9      	ldr	r1, [r7, #8]
 8000fce:	6978      	ldr	r0, [r7, #20]
 8000fd0:	f7ff ff90 	bl	8000ef4 <NVIC_EncodePriority>
 8000fd4:	4602      	mov	r2, r0
 8000fd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fda:	4611      	mov	r1, r2
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f7ff ff5f 	bl	8000ea0 <__NVIC_SetPriority>
}
 8000fe2:	bf00      	nop
 8000fe4:	3718      	adds	r7, #24
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}

08000fea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fea:	b580      	push	{r7, lr}
 8000fec:	b082      	sub	sp, #8
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ff4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f7ff ff35 	bl	8000e68 <__NVIC_EnableIRQ>
}
 8000ffe:	bf00      	nop
 8001000:	3708      	adds	r7, #8
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}

08001006 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001006:	b580      	push	{r7, lr}
 8001008:	b082      	sub	sp, #8
 800100a:	af00      	add	r7, sp, #0
 800100c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800100e:	6878      	ldr	r0, [r7, #4]
 8001010:	f7ff ffa2 	bl	8000f58 <SysTick_Config>
 8001014:	4603      	mov	r3, r0
}
 8001016:	4618      	mov	r0, r3
 8001018:	3708      	adds	r7, #8
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}

0800101e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800101e:	b480      	push	{r7}
 8001020:	b085      	sub	sp, #20
 8001022:	af00      	add	r7, sp, #0
 8001024:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001026:	2300      	movs	r3, #0
 8001028:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001030:	b2db      	uxtb	r3, r3
 8001032:	2b02      	cmp	r3, #2
 8001034:	d008      	beq.n	8001048 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2204      	movs	r2, #4
 800103a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2200      	movs	r2, #0
 8001040:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001044:	2301      	movs	r3, #1
 8001046:	e020      	b.n	800108a <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	681a      	ldr	r2, [r3, #0]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f022 020e 	bic.w	r2, r2, #14
 8001056:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	681a      	ldr	r2, [r3, #0]
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f022 0201 	bic.w	r2, r2, #1
 8001066:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001070:	2101      	movs	r1, #1
 8001072:	fa01 f202 	lsl.w	r2, r1, r2
 8001076:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2201      	movs	r2, #1
 800107c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2200      	movs	r2, #0
 8001084:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001088:	7bfb      	ldrb	r3, [r7, #15]
}
 800108a:	4618      	mov	r0, r3
 800108c:	3714      	adds	r7, #20
 800108e:	46bd      	mov	sp, r7
 8001090:	bc80      	pop	{r7}
 8001092:	4770      	bx	lr

08001094 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001094:	b580      	push	{r7, lr}
 8001096:	b084      	sub	sp, #16
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800109c:	2300      	movs	r3, #0
 800109e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80010a6:	b2db      	uxtb	r3, r3
 80010a8:	2b02      	cmp	r3, #2
 80010aa:	d005      	beq.n	80010b8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	2204      	movs	r2, #4
 80010b0:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80010b2:	2301      	movs	r3, #1
 80010b4:	73fb      	strb	r3, [r7, #15]
 80010b6:	e051      	b.n	800115c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	681a      	ldr	r2, [r3, #0]
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f022 020e 	bic.w	r2, r2, #14
 80010c6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	681a      	ldr	r2, [r3, #0]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f022 0201 	bic.w	r2, r2, #1
 80010d6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a22      	ldr	r2, [pc, #136]	; (8001168 <HAL_DMA_Abort_IT+0xd4>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d029      	beq.n	8001136 <HAL_DMA_Abort_IT+0xa2>
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4a21      	ldr	r2, [pc, #132]	; (800116c <HAL_DMA_Abort_IT+0xd8>)
 80010e8:	4293      	cmp	r3, r2
 80010ea:	d022      	beq.n	8001132 <HAL_DMA_Abort_IT+0x9e>
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a1f      	ldr	r2, [pc, #124]	; (8001170 <HAL_DMA_Abort_IT+0xdc>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d01a      	beq.n	800112c <HAL_DMA_Abort_IT+0x98>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	4a1e      	ldr	r2, [pc, #120]	; (8001174 <HAL_DMA_Abort_IT+0xe0>)
 80010fc:	4293      	cmp	r3, r2
 80010fe:	d012      	beq.n	8001126 <HAL_DMA_Abort_IT+0x92>
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a1c      	ldr	r2, [pc, #112]	; (8001178 <HAL_DMA_Abort_IT+0xe4>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d00a      	beq.n	8001120 <HAL_DMA_Abort_IT+0x8c>
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4a1b      	ldr	r2, [pc, #108]	; (800117c <HAL_DMA_Abort_IT+0xe8>)
 8001110:	4293      	cmp	r3, r2
 8001112:	d102      	bne.n	800111a <HAL_DMA_Abort_IT+0x86>
 8001114:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001118:	e00e      	b.n	8001138 <HAL_DMA_Abort_IT+0xa4>
 800111a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800111e:	e00b      	b.n	8001138 <HAL_DMA_Abort_IT+0xa4>
 8001120:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001124:	e008      	b.n	8001138 <HAL_DMA_Abort_IT+0xa4>
 8001126:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800112a:	e005      	b.n	8001138 <HAL_DMA_Abort_IT+0xa4>
 800112c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001130:	e002      	b.n	8001138 <HAL_DMA_Abort_IT+0xa4>
 8001132:	2310      	movs	r3, #16
 8001134:	e000      	b.n	8001138 <HAL_DMA_Abort_IT+0xa4>
 8001136:	2301      	movs	r3, #1
 8001138:	4a11      	ldr	r2, [pc, #68]	; (8001180 <HAL_DMA_Abort_IT+0xec>)
 800113a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2201      	movs	r2, #1
 8001140:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2200      	movs	r2, #0
 8001148:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001150:	2b00      	cmp	r3, #0
 8001152:	d003      	beq.n	800115c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001158:	6878      	ldr	r0, [r7, #4]
 800115a:	4798      	blx	r3
    } 
  }
  return status;
 800115c:	7bfb      	ldrb	r3, [r7, #15]
}
 800115e:	4618      	mov	r0, r3
 8001160:	3710      	adds	r7, #16
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	40020008 	.word	0x40020008
 800116c:	4002001c 	.word	0x4002001c
 8001170:	40020030 	.word	0x40020030
 8001174:	40020044 	.word	0x40020044
 8001178:	40020058 	.word	0x40020058
 800117c:	4002006c 	.word	0x4002006c
 8001180:	40020000 	.word	0x40020000

08001184 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001184:	b480      	push	{r7}
 8001186:	b08b      	sub	sp, #44	; 0x2c
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
 800118c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800118e:	2300      	movs	r3, #0
 8001190:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001192:	2300      	movs	r3, #0
 8001194:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001196:	e148      	b.n	800142a <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001198:	2201      	movs	r2, #1
 800119a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800119c:	fa02 f303 	lsl.w	r3, r2, r3
 80011a0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	69fa      	ldr	r2, [r7, #28]
 80011a8:	4013      	ands	r3, r2
 80011aa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80011ac:	69ba      	ldr	r2, [r7, #24]
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	429a      	cmp	r2, r3
 80011b2:	f040 8137 	bne.w	8001424 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	4aa3      	ldr	r2, [pc, #652]	; (8001448 <HAL_GPIO_Init+0x2c4>)
 80011bc:	4293      	cmp	r3, r2
 80011be:	d05e      	beq.n	800127e <HAL_GPIO_Init+0xfa>
 80011c0:	4aa1      	ldr	r2, [pc, #644]	; (8001448 <HAL_GPIO_Init+0x2c4>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d875      	bhi.n	80012b2 <HAL_GPIO_Init+0x12e>
 80011c6:	4aa1      	ldr	r2, [pc, #644]	; (800144c <HAL_GPIO_Init+0x2c8>)
 80011c8:	4293      	cmp	r3, r2
 80011ca:	d058      	beq.n	800127e <HAL_GPIO_Init+0xfa>
 80011cc:	4a9f      	ldr	r2, [pc, #636]	; (800144c <HAL_GPIO_Init+0x2c8>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d86f      	bhi.n	80012b2 <HAL_GPIO_Init+0x12e>
 80011d2:	4a9f      	ldr	r2, [pc, #636]	; (8001450 <HAL_GPIO_Init+0x2cc>)
 80011d4:	4293      	cmp	r3, r2
 80011d6:	d052      	beq.n	800127e <HAL_GPIO_Init+0xfa>
 80011d8:	4a9d      	ldr	r2, [pc, #628]	; (8001450 <HAL_GPIO_Init+0x2cc>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d869      	bhi.n	80012b2 <HAL_GPIO_Init+0x12e>
 80011de:	4a9d      	ldr	r2, [pc, #628]	; (8001454 <HAL_GPIO_Init+0x2d0>)
 80011e0:	4293      	cmp	r3, r2
 80011e2:	d04c      	beq.n	800127e <HAL_GPIO_Init+0xfa>
 80011e4:	4a9b      	ldr	r2, [pc, #620]	; (8001454 <HAL_GPIO_Init+0x2d0>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d863      	bhi.n	80012b2 <HAL_GPIO_Init+0x12e>
 80011ea:	4a9b      	ldr	r2, [pc, #620]	; (8001458 <HAL_GPIO_Init+0x2d4>)
 80011ec:	4293      	cmp	r3, r2
 80011ee:	d046      	beq.n	800127e <HAL_GPIO_Init+0xfa>
 80011f0:	4a99      	ldr	r2, [pc, #612]	; (8001458 <HAL_GPIO_Init+0x2d4>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d85d      	bhi.n	80012b2 <HAL_GPIO_Init+0x12e>
 80011f6:	2b12      	cmp	r3, #18
 80011f8:	d82a      	bhi.n	8001250 <HAL_GPIO_Init+0xcc>
 80011fa:	2b12      	cmp	r3, #18
 80011fc:	d859      	bhi.n	80012b2 <HAL_GPIO_Init+0x12e>
 80011fe:	a201      	add	r2, pc, #4	; (adr r2, 8001204 <HAL_GPIO_Init+0x80>)
 8001200:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001204:	0800127f 	.word	0x0800127f
 8001208:	08001259 	.word	0x08001259
 800120c:	0800126b 	.word	0x0800126b
 8001210:	080012ad 	.word	0x080012ad
 8001214:	080012b3 	.word	0x080012b3
 8001218:	080012b3 	.word	0x080012b3
 800121c:	080012b3 	.word	0x080012b3
 8001220:	080012b3 	.word	0x080012b3
 8001224:	080012b3 	.word	0x080012b3
 8001228:	080012b3 	.word	0x080012b3
 800122c:	080012b3 	.word	0x080012b3
 8001230:	080012b3 	.word	0x080012b3
 8001234:	080012b3 	.word	0x080012b3
 8001238:	080012b3 	.word	0x080012b3
 800123c:	080012b3 	.word	0x080012b3
 8001240:	080012b3 	.word	0x080012b3
 8001244:	080012b3 	.word	0x080012b3
 8001248:	08001261 	.word	0x08001261
 800124c:	08001275 	.word	0x08001275
 8001250:	4a82      	ldr	r2, [pc, #520]	; (800145c <HAL_GPIO_Init+0x2d8>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d013      	beq.n	800127e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001256:	e02c      	b.n	80012b2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	68db      	ldr	r3, [r3, #12]
 800125c:	623b      	str	r3, [r7, #32]
          break;
 800125e:	e029      	b.n	80012b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	68db      	ldr	r3, [r3, #12]
 8001264:	3304      	adds	r3, #4
 8001266:	623b      	str	r3, [r7, #32]
          break;
 8001268:	e024      	b.n	80012b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	68db      	ldr	r3, [r3, #12]
 800126e:	3308      	adds	r3, #8
 8001270:	623b      	str	r3, [r7, #32]
          break;
 8001272:	e01f      	b.n	80012b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	68db      	ldr	r3, [r3, #12]
 8001278:	330c      	adds	r3, #12
 800127a:	623b      	str	r3, [r7, #32]
          break;
 800127c:	e01a      	b.n	80012b4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	689b      	ldr	r3, [r3, #8]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d102      	bne.n	800128c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001286:	2304      	movs	r3, #4
 8001288:	623b      	str	r3, [r7, #32]
          break;
 800128a:	e013      	b.n	80012b4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	689b      	ldr	r3, [r3, #8]
 8001290:	2b01      	cmp	r3, #1
 8001292:	d105      	bne.n	80012a0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001294:	2308      	movs	r3, #8
 8001296:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	69fa      	ldr	r2, [r7, #28]
 800129c:	611a      	str	r2, [r3, #16]
          break;
 800129e:	e009      	b.n	80012b4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012a0:	2308      	movs	r3, #8
 80012a2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	69fa      	ldr	r2, [r7, #28]
 80012a8:	615a      	str	r2, [r3, #20]
          break;
 80012aa:	e003      	b.n	80012b4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80012ac:	2300      	movs	r3, #0
 80012ae:	623b      	str	r3, [r7, #32]
          break;
 80012b0:	e000      	b.n	80012b4 <HAL_GPIO_Init+0x130>
          break;
 80012b2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80012b4:	69bb      	ldr	r3, [r7, #24]
 80012b6:	2bff      	cmp	r3, #255	; 0xff
 80012b8:	d801      	bhi.n	80012be <HAL_GPIO_Init+0x13a>
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	e001      	b.n	80012c2 <HAL_GPIO_Init+0x13e>
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	3304      	adds	r3, #4
 80012c2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80012c4:	69bb      	ldr	r3, [r7, #24]
 80012c6:	2bff      	cmp	r3, #255	; 0xff
 80012c8:	d802      	bhi.n	80012d0 <HAL_GPIO_Init+0x14c>
 80012ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012cc:	009b      	lsls	r3, r3, #2
 80012ce:	e002      	b.n	80012d6 <HAL_GPIO_Init+0x152>
 80012d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012d2:	3b08      	subs	r3, #8
 80012d4:	009b      	lsls	r3, r3, #2
 80012d6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	210f      	movs	r1, #15
 80012de:	693b      	ldr	r3, [r7, #16]
 80012e0:	fa01 f303 	lsl.w	r3, r1, r3
 80012e4:	43db      	mvns	r3, r3
 80012e6:	401a      	ands	r2, r3
 80012e8:	6a39      	ldr	r1, [r7, #32]
 80012ea:	693b      	ldr	r3, [r7, #16]
 80012ec:	fa01 f303 	lsl.w	r3, r1, r3
 80012f0:	431a      	orrs	r2, r3
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012fe:	2b00      	cmp	r3, #0
 8001300:	f000 8090 	beq.w	8001424 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001304:	4b56      	ldr	r3, [pc, #344]	; (8001460 <HAL_GPIO_Init+0x2dc>)
 8001306:	699b      	ldr	r3, [r3, #24]
 8001308:	4a55      	ldr	r2, [pc, #340]	; (8001460 <HAL_GPIO_Init+0x2dc>)
 800130a:	f043 0301 	orr.w	r3, r3, #1
 800130e:	6193      	str	r3, [r2, #24]
 8001310:	4b53      	ldr	r3, [pc, #332]	; (8001460 <HAL_GPIO_Init+0x2dc>)
 8001312:	699b      	ldr	r3, [r3, #24]
 8001314:	f003 0301 	and.w	r3, r3, #1
 8001318:	60bb      	str	r3, [r7, #8]
 800131a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800131c:	4a51      	ldr	r2, [pc, #324]	; (8001464 <HAL_GPIO_Init+0x2e0>)
 800131e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001320:	089b      	lsrs	r3, r3, #2
 8001322:	3302      	adds	r3, #2
 8001324:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001328:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800132a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800132c:	f003 0303 	and.w	r3, r3, #3
 8001330:	009b      	lsls	r3, r3, #2
 8001332:	220f      	movs	r2, #15
 8001334:	fa02 f303 	lsl.w	r3, r2, r3
 8001338:	43db      	mvns	r3, r3
 800133a:	68fa      	ldr	r2, [r7, #12]
 800133c:	4013      	ands	r3, r2
 800133e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	4a49      	ldr	r2, [pc, #292]	; (8001468 <HAL_GPIO_Init+0x2e4>)
 8001344:	4293      	cmp	r3, r2
 8001346:	d00d      	beq.n	8001364 <HAL_GPIO_Init+0x1e0>
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	4a48      	ldr	r2, [pc, #288]	; (800146c <HAL_GPIO_Init+0x2e8>)
 800134c:	4293      	cmp	r3, r2
 800134e:	d007      	beq.n	8001360 <HAL_GPIO_Init+0x1dc>
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	4a47      	ldr	r2, [pc, #284]	; (8001470 <HAL_GPIO_Init+0x2ec>)
 8001354:	4293      	cmp	r3, r2
 8001356:	d101      	bne.n	800135c <HAL_GPIO_Init+0x1d8>
 8001358:	2302      	movs	r3, #2
 800135a:	e004      	b.n	8001366 <HAL_GPIO_Init+0x1e2>
 800135c:	2303      	movs	r3, #3
 800135e:	e002      	b.n	8001366 <HAL_GPIO_Init+0x1e2>
 8001360:	2301      	movs	r3, #1
 8001362:	e000      	b.n	8001366 <HAL_GPIO_Init+0x1e2>
 8001364:	2300      	movs	r3, #0
 8001366:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001368:	f002 0203 	and.w	r2, r2, #3
 800136c:	0092      	lsls	r2, r2, #2
 800136e:	4093      	lsls	r3, r2
 8001370:	68fa      	ldr	r2, [r7, #12]
 8001372:	4313      	orrs	r3, r2
 8001374:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001376:	493b      	ldr	r1, [pc, #236]	; (8001464 <HAL_GPIO_Init+0x2e0>)
 8001378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800137a:	089b      	lsrs	r3, r3, #2
 800137c:	3302      	adds	r3, #2
 800137e:	68fa      	ldr	r2, [r7, #12]
 8001380:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800138c:	2b00      	cmp	r3, #0
 800138e:	d006      	beq.n	800139e <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001390:	4b38      	ldr	r3, [pc, #224]	; (8001474 <HAL_GPIO_Init+0x2f0>)
 8001392:	689a      	ldr	r2, [r3, #8]
 8001394:	4937      	ldr	r1, [pc, #220]	; (8001474 <HAL_GPIO_Init+0x2f0>)
 8001396:	69bb      	ldr	r3, [r7, #24]
 8001398:	4313      	orrs	r3, r2
 800139a:	608b      	str	r3, [r1, #8]
 800139c:	e006      	b.n	80013ac <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800139e:	4b35      	ldr	r3, [pc, #212]	; (8001474 <HAL_GPIO_Init+0x2f0>)
 80013a0:	689a      	ldr	r2, [r3, #8]
 80013a2:	69bb      	ldr	r3, [r7, #24]
 80013a4:	43db      	mvns	r3, r3
 80013a6:	4933      	ldr	r1, [pc, #204]	; (8001474 <HAL_GPIO_Init+0x2f0>)
 80013a8:	4013      	ands	r3, r2
 80013aa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d006      	beq.n	80013c6 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80013b8:	4b2e      	ldr	r3, [pc, #184]	; (8001474 <HAL_GPIO_Init+0x2f0>)
 80013ba:	68da      	ldr	r2, [r3, #12]
 80013bc:	492d      	ldr	r1, [pc, #180]	; (8001474 <HAL_GPIO_Init+0x2f0>)
 80013be:	69bb      	ldr	r3, [r7, #24]
 80013c0:	4313      	orrs	r3, r2
 80013c2:	60cb      	str	r3, [r1, #12]
 80013c4:	e006      	b.n	80013d4 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80013c6:	4b2b      	ldr	r3, [pc, #172]	; (8001474 <HAL_GPIO_Init+0x2f0>)
 80013c8:	68da      	ldr	r2, [r3, #12]
 80013ca:	69bb      	ldr	r3, [r7, #24]
 80013cc:	43db      	mvns	r3, r3
 80013ce:	4929      	ldr	r1, [pc, #164]	; (8001474 <HAL_GPIO_Init+0x2f0>)
 80013d0:	4013      	ands	r3, r2
 80013d2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d006      	beq.n	80013ee <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80013e0:	4b24      	ldr	r3, [pc, #144]	; (8001474 <HAL_GPIO_Init+0x2f0>)
 80013e2:	685a      	ldr	r2, [r3, #4]
 80013e4:	4923      	ldr	r1, [pc, #140]	; (8001474 <HAL_GPIO_Init+0x2f0>)
 80013e6:	69bb      	ldr	r3, [r7, #24]
 80013e8:	4313      	orrs	r3, r2
 80013ea:	604b      	str	r3, [r1, #4]
 80013ec:	e006      	b.n	80013fc <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80013ee:	4b21      	ldr	r3, [pc, #132]	; (8001474 <HAL_GPIO_Init+0x2f0>)
 80013f0:	685a      	ldr	r2, [r3, #4]
 80013f2:	69bb      	ldr	r3, [r7, #24]
 80013f4:	43db      	mvns	r3, r3
 80013f6:	491f      	ldr	r1, [pc, #124]	; (8001474 <HAL_GPIO_Init+0x2f0>)
 80013f8:	4013      	ands	r3, r2
 80013fa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001404:	2b00      	cmp	r3, #0
 8001406:	d006      	beq.n	8001416 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001408:	4b1a      	ldr	r3, [pc, #104]	; (8001474 <HAL_GPIO_Init+0x2f0>)
 800140a:	681a      	ldr	r2, [r3, #0]
 800140c:	4919      	ldr	r1, [pc, #100]	; (8001474 <HAL_GPIO_Init+0x2f0>)
 800140e:	69bb      	ldr	r3, [r7, #24]
 8001410:	4313      	orrs	r3, r2
 8001412:	600b      	str	r3, [r1, #0]
 8001414:	e006      	b.n	8001424 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001416:	4b17      	ldr	r3, [pc, #92]	; (8001474 <HAL_GPIO_Init+0x2f0>)
 8001418:	681a      	ldr	r2, [r3, #0]
 800141a:	69bb      	ldr	r3, [r7, #24]
 800141c:	43db      	mvns	r3, r3
 800141e:	4915      	ldr	r1, [pc, #84]	; (8001474 <HAL_GPIO_Init+0x2f0>)
 8001420:	4013      	ands	r3, r2
 8001422:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001426:	3301      	adds	r3, #1
 8001428:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	681a      	ldr	r2, [r3, #0]
 800142e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001430:	fa22 f303 	lsr.w	r3, r2, r3
 8001434:	2b00      	cmp	r3, #0
 8001436:	f47f aeaf 	bne.w	8001198 <HAL_GPIO_Init+0x14>
  }
}
 800143a:	bf00      	nop
 800143c:	bf00      	nop
 800143e:	372c      	adds	r7, #44	; 0x2c
 8001440:	46bd      	mov	sp, r7
 8001442:	bc80      	pop	{r7}
 8001444:	4770      	bx	lr
 8001446:	bf00      	nop
 8001448:	10320000 	.word	0x10320000
 800144c:	10310000 	.word	0x10310000
 8001450:	10220000 	.word	0x10220000
 8001454:	10210000 	.word	0x10210000
 8001458:	10120000 	.word	0x10120000
 800145c:	10110000 	.word	0x10110000
 8001460:	40021000 	.word	0x40021000
 8001464:	40010000 	.word	0x40010000
 8001468:	40010800 	.word	0x40010800
 800146c:	40010c00 	.word	0x40010c00
 8001470:	40011000 	.word	0x40011000
 8001474:	40010400 	.word	0x40010400

08001478 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
 8001480:	460b      	mov	r3, r1
 8001482:	807b      	strh	r3, [r7, #2]
 8001484:	4613      	mov	r3, r2
 8001486:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001488:	787b      	ldrb	r3, [r7, #1]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d003      	beq.n	8001496 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800148e:	887a      	ldrh	r2, [r7, #2]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001494:	e003      	b.n	800149e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001496:	887b      	ldrh	r3, [r7, #2]
 8001498:	041a      	lsls	r2, r3, #16
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	611a      	str	r2, [r3, #16]
}
 800149e:	bf00      	nop
 80014a0:	370c      	adds	r7, #12
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bc80      	pop	{r7}
 80014a6:	4770      	bx	lr

080014a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b086      	sub	sp, #24
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d101      	bne.n	80014ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014b6:	2301      	movs	r3, #1
 80014b8:	e26c      	b.n	8001994 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f003 0301 	and.w	r3, r3, #1
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	f000 8087 	beq.w	80015d6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80014c8:	4b92      	ldr	r3, [pc, #584]	; (8001714 <HAL_RCC_OscConfig+0x26c>)
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	f003 030c 	and.w	r3, r3, #12
 80014d0:	2b04      	cmp	r3, #4
 80014d2:	d00c      	beq.n	80014ee <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80014d4:	4b8f      	ldr	r3, [pc, #572]	; (8001714 <HAL_RCC_OscConfig+0x26c>)
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	f003 030c 	and.w	r3, r3, #12
 80014dc:	2b08      	cmp	r3, #8
 80014de:	d112      	bne.n	8001506 <HAL_RCC_OscConfig+0x5e>
 80014e0:	4b8c      	ldr	r3, [pc, #560]	; (8001714 <HAL_RCC_OscConfig+0x26c>)
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014ec:	d10b      	bne.n	8001506 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014ee:	4b89      	ldr	r3, [pc, #548]	; (8001714 <HAL_RCC_OscConfig+0x26c>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d06c      	beq.n	80015d4 <HAL_RCC_OscConfig+0x12c>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d168      	bne.n	80015d4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001502:	2301      	movs	r3, #1
 8001504:	e246      	b.n	8001994 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800150e:	d106      	bne.n	800151e <HAL_RCC_OscConfig+0x76>
 8001510:	4b80      	ldr	r3, [pc, #512]	; (8001714 <HAL_RCC_OscConfig+0x26c>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a7f      	ldr	r2, [pc, #508]	; (8001714 <HAL_RCC_OscConfig+0x26c>)
 8001516:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800151a:	6013      	str	r3, [r2, #0]
 800151c:	e02e      	b.n	800157c <HAL_RCC_OscConfig+0xd4>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d10c      	bne.n	8001540 <HAL_RCC_OscConfig+0x98>
 8001526:	4b7b      	ldr	r3, [pc, #492]	; (8001714 <HAL_RCC_OscConfig+0x26c>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4a7a      	ldr	r2, [pc, #488]	; (8001714 <HAL_RCC_OscConfig+0x26c>)
 800152c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001530:	6013      	str	r3, [r2, #0]
 8001532:	4b78      	ldr	r3, [pc, #480]	; (8001714 <HAL_RCC_OscConfig+0x26c>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4a77      	ldr	r2, [pc, #476]	; (8001714 <HAL_RCC_OscConfig+0x26c>)
 8001538:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800153c:	6013      	str	r3, [r2, #0]
 800153e:	e01d      	b.n	800157c <HAL_RCC_OscConfig+0xd4>
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001548:	d10c      	bne.n	8001564 <HAL_RCC_OscConfig+0xbc>
 800154a:	4b72      	ldr	r3, [pc, #456]	; (8001714 <HAL_RCC_OscConfig+0x26c>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4a71      	ldr	r2, [pc, #452]	; (8001714 <HAL_RCC_OscConfig+0x26c>)
 8001550:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001554:	6013      	str	r3, [r2, #0]
 8001556:	4b6f      	ldr	r3, [pc, #444]	; (8001714 <HAL_RCC_OscConfig+0x26c>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a6e      	ldr	r2, [pc, #440]	; (8001714 <HAL_RCC_OscConfig+0x26c>)
 800155c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001560:	6013      	str	r3, [r2, #0]
 8001562:	e00b      	b.n	800157c <HAL_RCC_OscConfig+0xd4>
 8001564:	4b6b      	ldr	r3, [pc, #428]	; (8001714 <HAL_RCC_OscConfig+0x26c>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a6a      	ldr	r2, [pc, #424]	; (8001714 <HAL_RCC_OscConfig+0x26c>)
 800156a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800156e:	6013      	str	r3, [r2, #0]
 8001570:	4b68      	ldr	r3, [pc, #416]	; (8001714 <HAL_RCC_OscConfig+0x26c>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a67      	ldr	r2, [pc, #412]	; (8001714 <HAL_RCC_OscConfig+0x26c>)
 8001576:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800157a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d013      	beq.n	80015ac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001584:	f7ff fa16 	bl	80009b4 <HAL_GetTick>
 8001588:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800158a:	e008      	b.n	800159e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800158c:	f7ff fa12 	bl	80009b4 <HAL_GetTick>
 8001590:	4602      	mov	r2, r0
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	1ad3      	subs	r3, r2, r3
 8001596:	2b64      	cmp	r3, #100	; 0x64
 8001598:	d901      	bls.n	800159e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800159a:	2303      	movs	r3, #3
 800159c:	e1fa      	b.n	8001994 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800159e:	4b5d      	ldr	r3, [pc, #372]	; (8001714 <HAL_RCC_OscConfig+0x26c>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d0f0      	beq.n	800158c <HAL_RCC_OscConfig+0xe4>
 80015aa:	e014      	b.n	80015d6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ac:	f7ff fa02 	bl	80009b4 <HAL_GetTick>
 80015b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015b2:	e008      	b.n	80015c6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015b4:	f7ff f9fe 	bl	80009b4 <HAL_GetTick>
 80015b8:	4602      	mov	r2, r0
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	1ad3      	subs	r3, r2, r3
 80015be:	2b64      	cmp	r3, #100	; 0x64
 80015c0:	d901      	bls.n	80015c6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80015c2:	2303      	movs	r3, #3
 80015c4:	e1e6      	b.n	8001994 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015c6:	4b53      	ldr	r3, [pc, #332]	; (8001714 <HAL_RCC_OscConfig+0x26c>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d1f0      	bne.n	80015b4 <HAL_RCC_OscConfig+0x10c>
 80015d2:	e000      	b.n	80015d6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f003 0302 	and.w	r3, r3, #2
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d063      	beq.n	80016aa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80015e2:	4b4c      	ldr	r3, [pc, #304]	; (8001714 <HAL_RCC_OscConfig+0x26c>)
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	f003 030c 	and.w	r3, r3, #12
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d00b      	beq.n	8001606 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80015ee:	4b49      	ldr	r3, [pc, #292]	; (8001714 <HAL_RCC_OscConfig+0x26c>)
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	f003 030c 	and.w	r3, r3, #12
 80015f6:	2b08      	cmp	r3, #8
 80015f8:	d11c      	bne.n	8001634 <HAL_RCC_OscConfig+0x18c>
 80015fa:	4b46      	ldr	r3, [pc, #280]	; (8001714 <HAL_RCC_OscConfig+0x26c>)
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001602:	2b00      	cmp	r3, #0
 8001604:	d116      	bne.n	8001634 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001606:	4b43      	ldr	r3, [pc, #268]	; (8001714 <HAL_RCC_OscConfig+0x26c>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f003 0302 	and.w	r3, r3, #2
 800160e:	2b00      	cmp	r3, #0
 8001610:	d005      	beq.n	800161e <HAL_RCC_OscConfig+0x176>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	691b      	ldr	r3, [r3, #16]
 8001616:	2b01      	cmp	r3, #1
 8001618:	d001      	beq.n	800161e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800161a:	2301      	movs	r3, #1
 800161c:	e1ba      	b.n	8001994 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800161e:	4b3d      	ldr	r3, [pc, #244]	; (8001714 <HAL_RCC_OscConfig+0x26c>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	695b      	ldr	r3, [r3, #20]
 800162a:	00db      	lsls	r3, r3, #3
 800162c:	4939      	ldr	r1, [pc, #228]	; (8001714 <HAL_RCC_OscConfig+0x26c>)
 800162e:	4313      	orrs	r3, r2
 8001630:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001632:	e03a      	b.n	80016aa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	691b      	ldr	r3, [r3, #16]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d020      	beq.n	800167e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800163c:	4b36      	ldr	r3, [pc, #216]	; (8001718 <HAL_RCC_OscConfig+0x270>)
 800163e:	2201      	movs	r2, #1
 8001640:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001642:	f7ff f9b7 	bl	80009b4 <HAL_GetTick>
 8001646:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001648:	e008      	b.n	800165c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800164a:	f7ff f9b3 	bl	80009b4 <HAL_GetTick>
 800164e:	4602      	mov	r2, r0
 8001650:	693b      	ldr	r3, [r7, #16]
 8001652:	1ad3      	subs	r3, r2, r3
 8001654:	2b02      	cmp	r3, #2
 8001656:	d901      	bls.n	800165c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001658:	2303      	movs	r3, #3
 800165a:	e19b      	b.n	8001994 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800165c:	4b2d      	ldr	r3, [pc, #180]	; (8001714 <HAL_RCC_OscConfig+0x26c>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f003 0302 	and.w	r3, r3, #2
 8001664:	2b00      	cmp	r3, #0
 8001666:	d0f0      	beq.n	800164a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001668:	4b2a      	ldr	r3, [pc, #168]	; (8001714 <HAL_RCC_OscConfig+0x26c>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	695b      	ldr	r3, [r3, #20]
 8001674:	00db      	lsls	r3, r3, #3
 8001676:	4927      	ldr	r1, [pc, #156]	; (8001714 <HAL_RCC_OscConfig+0x26c>)
 8001678:	4313      	orrs	r3, r2
 800167a:	600b      	str	r3, [r1, #0]
 800167c:	e015      	b.n	80016aa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800167e:	4b26      	ldr	r3, [pc, #152]	; (8001718 <HAL_RCC_OscConfig+0x270>)
 8001680:	2200      	movs	r2, #0
 8001682:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001684:	f7ff f996 	bl	80009b4 <HAL_GetTick>
 8001688:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800168a:	e008      	b.n	800169e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800168c:	f7ff f992 	bl	80009b4 <HAL_GetTick>
 8001690:	4602      	mov	r2, r0
 8001692:	693b      	ldr	r3, [r7, #16]
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	2b02      	cmp	r3, #2
 8001698:	d901      	bls.n	800169e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800169a:	2303      	movs	r3, #3
 800169c:	e17a      	b.n	8001994 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800169e:	4b1d      	ldr	r3, [pc, #116]	; (8001714 <HAL_RCC_OscConfig+0x26c>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f003 0302 	and.w	r3, r3, #2
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d1f0      	bne.n	800168c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f003 0308 	and.w	r3, r3, #8
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d03a      	beq.n	800172c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	699b      	ldr	r3, [r3, #24]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d019      	beq.n	80016f2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016be:	4b17      	ldr	r3, [pc, #92]	; (800171c <HAL_RCC_OscConfig+0x274>)
 80016c0:	2201      	movs	r2, #1
 80016c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016c4:	f7ff f976 	bl	80009b4 <HAL_GetTick>
 80016c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016ca:	e008      	b.n	80016de <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016cc:	f7ff f972 	bl	80009b4 <HAL_GetTick>
 80016d0:	4602      	mov	r2, r0
 80016d2:	693b      	ldr	r3, [r7, #16]
 80016d4:	1ad3      	subs	r3, r2, r3
 80016d6:	2b02      	cmp	r3, #2
 80016d8:	d901      	bls.n	80016de <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80016da:	2303      	movs	r3, #3
 80016dc:	e15a      	b.n	8001994 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016de:	4b0d      	ldr	r3, [pc, #52]	; (8001714 <HAL_RCC_OscConfig+0x26c>)
 80016e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016e2:	f003 0302 	and.w	r3, r3, #2
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d0f0      	beq.n	80016cc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80016ea:	2001      	movs	r0, #1
 80016ec:	f000 facc 	bl	8001c88 <RCC_Delay>
 80016f0:	e01c      	b.n	800172c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016f2:	4b0a      	ldr	r3, [pc, #40]	; (800171c <HAL_RCC_OscConfig+0x274>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016f8:	f7ff f95c 	bl	80009b4 <HAL_GetTick>
 80016fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016fe:	e00f      	b.n	8001720 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001700:	f7ff f958 	bl	80009b4 <HAL_GetTick>
 8001704:	4602      	mov	r2, r0
 8001706:	693b      	ldr	r3, [r7, #16]
 8001708:	1ad3      	subs	r3, r2, r3
 800170a:	2b02      	cmp	r3, #2
 800170c:	d908      	bls.n	8001720 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800170e:	2303      	movs	r3, #3
 8001710:	e140      	b.n	8001994 <HAL_RCC_OscConfig+0x4ec>
 8001712:	bf00      	nop
 8001714:	40021000 	.word	0x40021000
 8001718:	42420000 	.word	0x42420000
 800171c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001720:	4b9e      	ldr	r3, [pc, #632]	; (800199c <HAL_RCC_OscConfig+0x4f4>)
 8001722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001724:	f003 0302 	and.w	r3, r3, #2
 8001728:	2b00      	cmp	r3, #0
 800172a:	d1e9      	bne.n	8001700 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f003 0304 	and.w	r3, r3, #4
 8001734:	2b00      	cmp	r3, #0
 8001736:	f000 80a6 	beq.w	8001886 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800173a:	2300      	movs	r3, #0
 800173c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800173e:	4b97      	ldr	r3, [pc, #604]	; (800199c <HAL_RCC_OscConfig+0x4f4>)
 8001740:	69db      	ldr	r3, [r3, #28]
 8001742:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001746:	2b00      	cmp	r3, #0
 8001748:	d10d      	bne.n	8001766 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800174a:	4b94      	ldr	r3, [pc, #592]	; (800199c <HAL_RCC_OscConfig+0x4f4>)
 800174c:	69db      	ldr	r3, [r3, #28]
 800174e:	4a93      	ldr	r2, [pc, #588]	; (800199c <HAL_RCC_OscConfig+0x4f4>)
 8001750:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001754:	61d3      	str	r3, [r2, #28]
 8001756:	4b91      	ldr	r3, [pc, #580]	; (800199c <HAL_RCC_OscConfig+0x4f4>)
 8001758:	69db      	ldr	r3, [r3, #28]
 800175a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800175e:	60bb      	str	r3, [r7, #8]
 8001760:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001762:	2301      	movs	r3, #1
 8001764:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001766:	4b8e      	ldr	r3, [pc, #568]	; (80019a0 <HAL_RCC_OscConfig+0x4f8>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800176e:	2b00      	cmp	r3, #0
 8001770:	d118      	bne.n	80017a4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001772:	4b8b      	ldr	r3, [pc, #556]	; (80019a0 <HAL_RCC_OscConfig+0x4f8>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4a8a      	ldr	r2, [pc, #552]	; (80019a0 <HAL_RCC_OscConfig+0x4f8>)
 8001778:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800177c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800177e:	f7ff f919 	bl	80009b4 <HAL_GetTick>
 8001782:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001784:	e008      	b.n	8001798 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001786:	f7ff f915 	bl	80009b4 <HAL_GetTick>
 800178a:	4602      	mov	r2, r0
 800178c:	693b      	ldr	r3, [r7, #16]
 800178e:	1ad3      	subs	r3, r2, r3
 8001790:	2b64      	cmp	r3, #100	; 0x64
 8001792:	d901      	bls.n	8001798 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001794:	2303      	movs	r3, #3
 8001796:	e0fd      	b.n	8001994 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001798:	4b81      	ldr	r3, [pc, #516]	; (80019a0 <HAL_RCC_OscConfig+0x4f8>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d0f0      	beq.n	8001786 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	68db      	ldr	r3, [r3, #12]
 80017a8:	2b01      	cmp	r3, #1
 80017aa:	d106      	bne.n	80017ba <HAL_RCC_OscConfig+0x312>
 80017ac:	4b7b      	ldr	r3, [pc, #492]	; (800199c <HAL_RCC_OscConfig+0x4f4>)
 80017ae:	6a1b      	ldr	r3, [r3, #32]
 80017b0:	4a7a      	ldr	r2, [pc, #488]	; (800199c <HAL_RCC_OscConfig+0x4f4>)
 80017b2:	f043 0301 	orr.w	r3, r3, #1
 80017b6:	6213      	str	r3, [r2, #32]
 80017b8:	e02d      	b.n	8001816 <HAL_RCC_OscConfig+0x36e>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	68db      	ldr	r3, [r3, #12]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d10c      	bne.n	80017dc <HAL_RCC_OscConfig+0x334>
 80017c2:	4b76      	ldr	r3, [pc, #472]	; (800199c <HAL_RCC_OscConfig+0x4f4>)
 80017c4:	6a1b      	ldr	r3, [r3, #32]
 80017c6:	4a75      	ldr	r2, [pc, #468]	; (800199c <HAL_RCC_OscConfig+0x4f4>)
 80017c8:	f023 0301 	bic.w	r3, r3, #1
 80017cc:	6213      	str	r3, [r2, #32]
 80017ce:	4b73      	ldr	r3, [pc, #460]	; (800199c <HAL_RCC_OscConfig+0x4f4>)
 80017d0:	6a1b      	ldr	r3, [r3, #32]
 80017d2:	4a72      	ldr	r2, [pc, #456]	; (800199c <HAL_RCC_OscConfig+0x4f4>)
 80017d4:	f023 0304 	bic.w	r3, r3, #4
 80017d8:	6213      	str	r3, [r2, #32]
 80017da:	e01c      	b.n	8001816 <HAL_RCC_OscConfig+0x36e>
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	68db      	ldr	r3, [r3, #12]
 80017e0:	2b05      	cmp	r3, #5
 80017e2:	d10c      	bne.n	80017fe <HAL_RCC_OscConfig+0x356>
 80017e4:	4b6d      	ldr	r3, [pc, #436]	; (800199c <HAL_RCC_OscConfig+0x4f4>)
 80017e6:	6a1b      	ldr	r3, [r3, #32]
 80017e8:	4a6c      	ldr	r2, [pc, #432]	; (800199c <HAL_RCC_OscConfig+0x4f4>)
 80017ea:	f043 0304 	orr.w	r3, r3, #4
 80017ee:	6213      	str	r3, [r2, #32]
 80017f0:	4b6a      	ldr	r3, [pc, #424]	; (800199c <HAL_RCC_OscConfig+0x4f4>)
 80017f2:	6a1b      	ldr	r3, [r3, #32]
 80017f4:	4a69      	ldr	r2, [pc, #420]	; (800199c <HAL_RCC_OscConfig+0x4f4>)
 80017f6:	f043 0301 	orr.w	r3, r3, #1
 80017fa:	6213      	str	r3, [r2, #32]
 80017fc:	e00b      	b.n	8001816 <HAL_RCC_OscConfig+0x36e>
 80017fe:	4b67      	ldr	r3, [pc, #412]	; (800199c <HAL_RCC_OscConfig+0x4f4>)
 8001800:	6a1b      	ldr	r3, [r3, #32]
 8001802:	4a66      	ldr	r2, [pc, #408]	; (800199c <HAL_RCC_OscConfig+0x4f4>)
 8001804:	f023 0301 	bic.w	r3, r3, #1
 8001808:	6213      	str	r3, [r2, #32]
 800180a:	4b64      	ldr	r3, [pc, #400]	; (800199c <HAL_RCC_OscConfig+0x4f4>)
 800180c:	6a1b      	ldr	r3, [r3, #32]
 800180e:	4a63      	ldr	r2, [pc, #396]	; (800199c <HAL_RCC_OscConfig+0x4f4>)
 8001810:	f023 0304 	bic.w	r3, r3, #4
 8001814:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	68db      	ldr	r3, [r3, #12]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d015      	beq.n	800184a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800181e:	f7ff f8c9 	bl	80009b4 <HAL_GetTick>
 8001822:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001824:	e00a      	b.n	800183c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001826:	f7ff f8c5 	bl	80009b4 <HAL_GetTick>
 800182a:	4602      	mov	r2, r0
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	1ad3      	subs	r3, r2, r3
 8001830:	f241 3288 	movw	r2, #5000	; 0x1388
 8001834:	4293      	cmp	r3, r2
 8001836:	d901      	bls.n	800183c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001838:	2303      	movs	r3, #3
 800183a:	e0ab      	b.n	8001994 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800183c:	4b57      	ldr	r3, [pc, #348]	; (800199c <HAL_RCC_OscConfig+0x4f4>)
 800183e:	6a1b      	ldr	r3, [r3, #32]
 8001840:	f003 0302 	and.w	r3, r3, #2
 8001844:	2b00      	cmp	r3, #0
 8001846:	d0ee      	beq.n	8001826 <HAL_RCC_OscConfig+0x37e>
 8001848:	e014      	b.n	8001874 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800184a:	f7ff f8b3 	bl	80009b4 <HAL_GetTick>
 800184e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001850:	e00a      	b.n	8001868 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001852:	f7ff f8af 	bl	80009b4 <HAL_GetTick>
 8001856:	4602      	mov	r2, r0
 8001858:	693b      	ldr	r3, [r7, #16]
 800185a:	1ad3      	subs	r3, r2, r3
 800185c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001860:	4293      	cmp	r3, r2
 8001862:	d901      	bls.n	8001868 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001864:	2303      	movs	r3, #3
 8001866:	e095      	b.n	8001994 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001868:	4b4c      	ldr	r3, [pc, #304]	; (800199c <HAL_RCC_OscConfig+0x4f4>)
 800186a:	6a1b      	ldr	r3, [r3, #32]
 800186c:	f003 0302 	and.w	r3, r3, #2
 8001870:	2b00      	cmp	r3, #0
 8001872:	d1ee      	bne.n	8001852 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001874:	7dfb      	ldrb	r3, [r7, #23]
 8001876:	2b01      	cmp	r3, #1
 8001878:	d105      	bne.n	8001886 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800187a:	4b48      	ldr	r3, [pc, #288]	; (800199c <HAL_RCC_OscConfig+0x4f4>)
 800187c:	69db      	ldr	r3, [r3, #28]
 800187e:	4a47      	ldr	r2, [pc, #284]	; (800199c <HAL_RCC_OscConfig+0x4f4>)
 8001880:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001884:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	69db      	ldr	r3, [r3, #28]
 800188a:	2b00      	cmp	r3, #0
 800188c:	f000 8081 	beq.w	8001992 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001890:	4b42      	ldr	r3, [pc, #264]	; (800199c <HAL_RCC_OscConfig+0x4f4>)
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	f003 030c 	and.w	r3, r3, #12
 8001898:	2b08      	cmp	r3, #8
 800189a:	d061      	beq.n	8001960 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	69db      	ldr	r3, [r3, #28]
 80018a0:	2b02      	cmp	r3, #2
 80018a2:	d146      	bne.n	8001932 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018a4:	4b3f      	ldr	r3, [pc, #252]	; (80019a4 <HAL_RCC_OscConfig+0x4fc>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018aa:	f7ff f883 	bl	80009b4 <HAL_GetTick>
 80018ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018b0:	e008      	b.n	80018c4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018b2:	f7ff f87f 	bl	80009b4 <HAL_GetTick>
 80018b6:	4602      	mov	r2, r0
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	1ad3      	subs	r3, r2, r3
 80018bc:	2b02      	cmp	r3, #2
 80018be:	d901      	bls.n	80018c4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80018c0:	2303      	movs	r3, #3
 80018c2:	e067      	b.n	8001994 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018c4:	4b35      	ldr	r3, [pc, #212]	; (800199c <HAL_RCC_OscConfig+0x4f4>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d1f0      	bne.n	80018b2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6a1b      	ldr	r3, [r3, #32]
 80018d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018d8:	d108      	bne.n	80018ec <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80018da:	4b30      	ldr	r3, [pc, #192]	; (800199c <HAL_RCC_OscConfig+0x4f4>)
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	689b      	ldr	r3, [r3, #8]
 80018e6:	492d      	ldr	r1, [pc, #180]	; (800199c <HAL_RCC_OscConfig+0x4f4>)
 80018e8:	4313      	orrs	r3, r2
 80018ea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018ec:	4b2b      	ldr	r3, [pc, #172]	; (800199c <HAL_RCC_OscConfig+0x4f4>)
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6a19      	ldr	r1, [r3, #32]
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018fc:	430b      	orrs	r3, r1
 80018fe:	4927      	ldr	r1, [pc, #156]	; (800199c <HAL_RCC_OscConfig+0x4f4>)
 8001900:	4313      	orrs	r3, r2
 8001902:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001904:	4b27      	ldr	r3, [pc, #156]	; (80019a4 <HAL_RCC_OscConfig+0x4fc>)
 8001906:	2201      	movs	r2, #1
 8001908:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800190a:	f7ff f853 	bl	80009b4 <HAL_GetTick>
 800190e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001910:	e008      	b.n	8001924 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001912:	f7ff f84f 	bl	80009b4 <HAL_GetTick>
 8001916:	4602      	mov	r2, r0
 8001918:	693b      	ldr	r3, [r7, #16]
 800191a:	1ad3      	subs	r3, r2, r3
 800191c:	2b02      	cmp	r3, #2
 800191e:	d901      	bls.n	8001924 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001920:	2303      	movs	r3, #3
 8001922:	e037      	b.n	8001994 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001924:	4b1d      	ldr	r3, [pc, #116]	; (800199c <HAL_RCC_OscConfig+0x4f4>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800192c:	2b00      	cmp	r3, #0
 800192e:	d0f0      	beq.n	8001912 <HAL_RCC_OscConfig+0x46a>
 8001930:	e02f      	b.n	8001992 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001932:	4b1c      	ldr	r3, [pc, #112]	; (80019a4 <HAL_RCC_OscConfig+0x4fc>)
 8001934:	2200      	movs	r2, #0
 8001936:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001938:	f7ff f83c 	bl	80009b4 <HAL_GetTick>
 800193c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800193e:	e008      	b.n	8001952 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001940:	f7ff f838 	bl	80009b4 <HAL_GetTick>
 8001944:	4602      	mov	r2, r0
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	1ad3      	subs	r3, r2, r3
 800194a:	2b02      	cmp	r3, #2
 800194c:	d901      	bls.n	8001952 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800194e:	2303      	movs	r3, #3
 8001950:	e020      	b.n	8001994 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001952:	4b12      	ldr	r3, [pc, #72]	; (800199c <HAL_RCC_OscConfig+0x4f4>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800195a:	2b00      	cmp	r3, #0
 800195c:	d1f0      	bne.n	8001940 <HAL_RCC_OscConfig+0x498>
 800195e:	e018      	b.n	8001992 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	69db      	ldr	r3, [r3, #28]
 8001964:	2b01      	cmp	r3, #1
 8001966:	d101      	bne.n	800196c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001968:	2301      	movs	r3, #1
 800196a:	e013      	b.n	8001994 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800196c:	4b0b      	ldr	r3, [pc, #44]	; (800199c <HAL_RCC_OscConfig+0x4f4>)
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6a1b      	ldr	r3, [r3, #32]
 800197c:	429a      	cmp	r2, r3
 800197e:	d106      	bne.n	800198e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800198a:	429a      	cmp	r2, r3
 800198c:	d001      	beq.n	8001992 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	e000      	b.n	8001994 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001992:	2300      	movs	r3, #0
}
 8001994:	4618      	mov	r0, r3
 8001996:	3718      	adds	r7, #24
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	40021000 	.word	0x40021000
 80019a0:	40007000 	.word	0x40007000
 80019a4:	42420060 	.word	0x42420060

080019a8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b084      	sub	sp, #16
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
 80019b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d101      	bne.n	80019bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019b8:	2301      	movs	r3, #1
 80019ba:	e0d0      	b.n	8001b5e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80019bc:	4b6a      	ldr	r3, [pc, #424]	; (8001b68 <HAL_RCC_ClockConfig+0x1c0>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f003 0307 	and.w	r3, r3, #7
 80019c4:	683a      	ldr	r2, [r7, #0]
 80019c6:	429a      	cmp	r2, r3
 80019c8:	d910      	bls.n	80019ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019ca:	4b67      	ldr	r3, [pc, #412]	; (8001b68 <HAL_RCC_ClockConfig+0x1c0>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f023 0207 	bic.w	r2, r3, #7
 80019d2:	4965      	ldr	r1, [pc, #404]	; (8001b68 <HAL_RCC_ClockConfig+0x1c0>)
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	4313      	orrs	r3, r2
 80019d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019da:	4b63      	ldr	r3, [pc, #396]	; (8001b68 <HAL_RCC_ClockConfig+0x1c0>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 0307 	and.w	r3, r3, #7
 80019e2:	683a      	ldr	r2, [r7, #0]
 80019e4:	429a      	cmp	r2, r3
 80019e6:	d001      	beq.n	80019ec <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80019e8:	2301      	movs	r3, #1
 80019ea:	e0b8      	b.n	8001b5e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f003 0302 	and.w	r3, r3, #2
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d020      	beq.n	8001a3a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f003 0304 	and.w	r3, r3, #4
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d005      	beq.n	8001a10 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a04:	4b59      	ldr	r3, [pc, #356]	; (8001b6c <HAL_RCC_ClockConfig+0x1c4>)
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	4a58      	ldr	r2, [pc, #352]	; (8001b6c <HAL_RCC_ClockConfig+0x1c4>)
 8001a0a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001a0e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f003 0308 	and.w	r3, r3, #8
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d005      	beq.n	8001a28 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a1c:	4b53      	ldr	r3, [pc, #332]	; (8001b6c <HAL_RCC_ClockConfig+0x1c4>)
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	4a52      	ldr	r2, [pc, #328]	; (8001b6c <HAL_RCC_ClockConfig+0x1c4>)
 8001a22:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001a26:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a28:	4b50      	ldr	r3, [pc, #320]	; (8001b6c <HAL_RCC_ClockConfig+0x1c4>)
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	494d      	ldr	r1, [pc, #308]	; (8001b6c <HAL_RCC_ClockConfig+0x1c4>)
 8001a36:	4313      	orrs	r3, r2
 8001a38:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f003 0301 	and.w	r3, r3, #1
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d040      	beq.n	8001ac8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	2b01      	cmp	r3, #1
 8001a4c:	d107      	bne.n	8001a5e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a4e:	4b47      	ldr	r3, [pc, #284]	; (8001b6c <HAL_RCC_ClockConfig+0x1c4>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d115      	bne.n	8001a86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e07f      	b.n	8001b5e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	2b02      	cmp	r3, #2
 8001a64:	d107      	bne.n	8001a76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a66:	4b41      	ldr	r3, [pc, #260]	; (8001b6c <HAL_RCC_ClockConfig+0x1c4>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d109      	bne.n	8001a86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	e073      	b.n	8001b5e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a76:	4b3d      	ldr	r3, [pc, #244]	; (8001b6c <HAL_RCC_ClockConfig+0x1c4>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 0302 	and.w	r3, r3, #2
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d101      	bne.n	8001a86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	e06b      	b.n	8001b5e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a86:	4b39      	ldr	r3, [pc, #228]	; (8001b6c <HAL_RCC_ClockConfig+0x1c4>)
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	f023 0203 	bic.w	r2, r3, #3
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	4936      	ldr	r1, [pc, #216]	; (8001b6c <HAL_RCC_ClockConfig+0x1c4>)
 8001a94:	4313      	orrs	r3, r2
 8001a96:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a98:	f7fe ff8c 	bl	80009b4 <HAL_GetTick>
 8001a9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a9e:	e00a      	b.n	8001ab6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001aa0:	f7fe ff88 	bl	80009b4 <HAL_GetTick>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	1ad3      	subs	r3, r2, r3
 8001aaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d901      	bls.n	8001ab6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	e053      	b.n	8001b5e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ab6:	4b2d      	ldr	r3, [pc, #180]	; (8001b6c <HAL_RCC_ClockConfig+0x1c4>)
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	f003 020c 	and.w	r2, r3, #12
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	009b      	lsls	r3, r3, #2
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	d1eb      	bne.n	8001aa0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ac8:	4b27      	ldr	r3, [pc, #156]	; (8001b68 <HAL_RCC_ClockConfig+0x1c0>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f003 0307 	and.w	r3, r3, #7
 8001ad0:	683a      	ldr	r2, [r7, #0]
 8001ad2:	429a      	cmp	r2, r3
 8001ad4:	d210      	bcs.n	8001af8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ad6:	4b24      	ldr	r3, [pc, #144]	; (8001b68 <HAL_RCC_ClockConfig+0x1c0>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f023 0207 	bic.w	r2, r3, #7
 8001ade:	4922      	ldr	r1, [pc, #136]	; (8001b68 <HAL_RCC_ClockConfig+0x1c0>)
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ae6:	4b20      	ldr	r3, [pc, #128]	; (8001b68 <HAL_RCC_ClockConfig+0x1c0>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f003 0307 	and.w	r3, r3, #7
 8001aee:	683a      	ldr	r2, [r7, #0]
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d001      	beq.n	8001af8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001af4:	2301      	movs	r3, #1
 8001af6:	e032      	b.n	8001b5e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f003 0304 	and.w	r3, r3, #4
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d008      	beq.n	8001b16 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b04:	4b19      	ldr	r3, [pc, #100]	; (8001b6c <HAL_RCC_ClockConfig+0x1c4>)
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	68db      	ldr	r3, [r3, #12]
 8001b10:	4916      	ldr	r1, [pc, #88]	; (8001b6c <HAL_RCC_ClockConfig+0x1c4>)
 8001b12:	4313      	orrs	r3, r2
 8001b14:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 0308 	and.w	r3, r3, #8
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d009      	beq.n	8001b36 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001b22:	4b12      	ldr	r3, [pc, #72]	; (8001b6c <HAL_RCC_ClockConfig+0x1c4>)
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	691b      	ldr	r3, [r3, #16]
 8001b2e:	00db      	lsls	r3, r3, #3
 8001b30:	490e      	ldr	r1, [pc, #56]	; (8001b6c <HAL_RCC_ClockConfig+0x1c4>)
 8001b32:	4313      	orrs	r3, r2
 8001b34:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001b36:	f000 f821 	bl	8001b7c <HAL_RCC_GetSysClockFreq>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	4b0b      	ldr	r3, [pc, #44]	; (8001b6c <HAL_RCC_ClockConfig+0x1c4>)
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	091b      	lsrs	r3, r3, #4
 8001b42:	f003 030f 	and.w	r3, r3, #15
 8001b46:	490a      	ldr	r1, [pc, #40]	; (8001b70 <HAL_RCC_ClockConfig+0x1c8>)
 8001b48:	5ccb      	ldrb	r3, [r1, r3]
 8001b4a:	fa22 f303 	lsr.w	r3, r2, r3
 8001b4e:	4a09      	ldr	r2, [pc, #36]	; (8001b74 <HAL_RCC_ClockConfig+0x1cc>)
 8001b50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001b52:	4b09      	ldr	r3, [pc, #36]	; (8001b78 <HAL_RCC_ClockConfig+0x1d0>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4618      	mov	r0, r3
 8001b58:	f7fe feea 	bl	8000930 <HAL_InitTick>

  return HAL_OK;
 8001b5c:	2300      	movs	r3, #0
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3710      	adds	r7, #16
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	40022000 	.word	0x40022000
 8001b6c:	40021000 	.word	0x40021000
 8001b70:	08003100 	.word	0x08003100
 8001b74:	2000001c 	.word	0x2000001c
 8001b78:	20000020 	.word	0x20000020

08001b7c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b087      	sub	sp, #28
 8001b80:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001b82:	2300      	movs	r3, #0
 8001b84:	60fb      	str	r3, [r7, #12]
 8001b86:	2300      	movs	r3, #0
 8001b88:	60bb      	str	r3, [r7, #8]
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	617b      	str	r3, [r7, #20]
 8001b8e:	2300      	movs	r3, #0
 8001b90:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001b92:	2300      	movs	r3, #0
 8001b94:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001b96:	4b1e      	ldr	r3, [pc, #120]	; (8001c10 <HAL_RCC_GetSysClockFreq+0x94>)
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	f003 030c 	and.w	r3, r3, #12
 8001ba2:	2b04      	cmp	r3, #4
 8001ba4:	d002      	beq.n	8001bac <HAL_RCC_GetSysClockFreq+0x30>
 8001ba6:	2b08      	cmp	r3, #8
 8001ba8:	d003      	beq.n	8001bb2 <HAL_RCC_GetSysClockFreq+0x36>
 8001baa:	e027      	b.n	8001bfc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001bac:	4b19      	ldr	r3, [pc, #100]	; (8001c14 <HAL_RCC_GetSysClockFreq+0x98>)
 8001bae:	613b      	str	r3, [r7, #16]
      break;
 8001bb0:	e027      	b.n	8001c02 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	0c9b      	lsrs	r3, r3, #18
 8001bb6:	f003 030f 	and.w	r3, r3, #15
 8001bba:	4a17      	ldr	r2, [pc, #92]	; (8001c18 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001bbc:	5cd3      	ldrb	r3, [r2, r3]
 8001bbe:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d010      	beq.n	8001bec <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001bca:	4b11      	ldr	r3, [pc, #68]	; (8001c10 <HAL_RCC_GetSysClockFreq+0x94>)
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	0c5b      	lsrs	r3, r3, #17
 8001bd0:	f003 0301 	and.w	r3, r3, #1
 8001bd4:	4a11      	ldr	r2, [pc, #68]	; (8001c1c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001bd6:	5cd3      	ldrb	r3, [r2, r3]
 8001bd8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	4a0d      	ldr	r2, [pc, #52]	; (8001c14 <HAL_RCC_GetSysClockFreq+0x98>)
 8001bde:	fb02 f203 	mul.w	r2, r2, r3
 8001be2:	68bb      	ldr	r3, [r7, #8]
 8001be4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001be8:	617b      	str	r3, [r7, #20]
 8001bea:	e004      	b.n	8001bf6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	4a0c      	ldr	r2, [pc, #48]	; (8001c20 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001bf0:	fb02 f303 	mul.w	r3, r2, r3
 8001bf4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	613b      	str	r3, [r7, #16]
      break;
 8001bfa:	e002      	b.n	8001c02 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001bfc:	4b05      	ldr	r3, [pc, #20]	; (8001c14 <HAL_RCC_GetSysClockFreq+0x98>)
 8001bfe:	613b      	str	r3, [r7, #16]
      break;
 8001c00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c02:	693b      	ldr	r3, [r7, #16]
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	371c      	adds	r7, #28
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bc80      	pop	{r7}
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop
 8001c10:	40021000 	.word	0x40021000
 8001c14:	007a1200 	.word	0x007a1200
 8001c18:	08003118 	.word	0x08003118
 8001c1c:	08003128 	.word	0x08003128
 8001c20:	003d0900 	.word	0x003d0900

08001c24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c28:	4b02      	ldr	r3, [pc, #8]	; (8001c34 <HAL_RCC_GetHCLKFreq+0x10>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bc80      	pop	{r7}
 8001c32:	4770      	bx	lr
 8001c34:	2000001c 	.word	0x2000001c

08001c38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001c3c:	f7ff fff2 	bl	8001c24 <HAL_RCC_GetHCLKFreq>
 8001c40:	4602      	mov	r2, r0
 8001c42:	4b05      	ldr	r3, [pc, #20]	; (8001c58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	0a1b      	lsrs	r3, r3, #8
 8001c48:	f003 0307 	and.w	r3, r3, #7
 8001c4c:	4903      	ldr	r1, [pc, #12]	; (8001c5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c4e:	5ccb      	ldrb	r3, [r1, r3]
 8001c50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	40021000 	.word	0x40021000
 8001c5c:	08003110 	.word	0x08003110

08001c60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001c64:	f7ff ffde 	bl	8001c24 <HAL_RCC_GetHCLKFreq>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	4b05      	ldr	r3, [pc, #20]	; (8001c80 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	0adb      	lsrs	r3, r3, #11
 8001c70:	f003 0307 	and.w	r3, r3, #7
 8001c74:	4903      	ldr	r1, [pc, #12]	; (8001c84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c76:	5ccb      	ldrb	r3, [r1, r3]
 8001c78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	40021000 	.word	0x40021000
 8001c84:	08003110 	.word	0x08003110

08001c88 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b085      	sub	sp, #20
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001c90:	4b0a      	ldr	r3, [pc, #40]	; (8001cbc <RCC_Delay+0x34>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a0a      	ldr	r2, [pc, #40]	; (8001cc0 <RCC_Delay+0x38>)
 8001c96:	fba2 2303 	umull	r2, r3, r2, r3
 8001c9a:	0a5b      	lsrs	r3, r3, #9
 8001c9c:	687a      	ldr	r2, [r7, #4]
 8001c9e:	fb02 f303 	mul.w	r3, r2, r3
 8001ca2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001ca4:	bf00      	nop
  }
  while (Delay --);
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	1e5a      	subs	r2, r3, #1
 8001caa:	60fa      	str	r2, [r7, #12]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d1f9      	bne.n	8001ca4 <RCC_Delay+0x1c>
}
 8001cb0:	bf00      	nop
 8001cb2:	bf00      	nop
 8001cb4:	3714      	adds	r7, #20
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bc80      	pop	{r7}
 8001cba:	4770      	bx	lr
 8001cbc:	2000001c 	.word	0x2000001c
 8001cc0:	10624dd3 	.word	0x10624dd3

08001cc4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b086      	sub	sp, #24
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	613b      	str	r3, [r7, #16]
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f003 0301 	and.w	r3, r3, #1
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d07d      	beq.n	8001ddc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ce4:	4b4f      	ldr	r3, [pc, #316]	; (8001e24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ce6:	69db      	ldr	r3, [r3, #28]
 8001ce8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d10d      	bne.n	8001d0c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cf0:	4b4c      	ldr	r3, [pc, #304]	; (8001e24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001cf2:	69db      	ldr	r3, [r3, #28]
 8001cf4:	4a4b      	ldr	r2, [pc, #300]	; (8001e24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001cf6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cfa:	61d3      	str	r3, [r2, #28]
 8001cfc:	4b49      	ldr	r3, [pc, #292]	; (8001e24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001cfe:	69db      	ldr	r3, [r3, #28]
 8001d00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d04:	60bb      	str	r3, [r7, #8]
 8001d06:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d0c:	4b46      	ldr	r3, [pc, #280]	; (8001e28 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d118      	bne.n	8001d4a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d18:	4b43      	ldr	r3, [pc, #268]	; (8001e28 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a42      	ldr	r2, [pc, #264]	; (8001e28 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001d1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d22:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d24:	f7fe fe46 	bl	80009b4 <HAL_GetTick>
 8001d28:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d2a:	e008      	b.n	8001d3e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d2c:	f7fe fe42 	bl	80009b4 <HAL_GetTick>
 8001d30:	4602      	mov	r2, r0
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	1ad3      	subs	r3, r2, r3
 8001d36:	2b64      	cmp	r3, #100	; 0x64
 8001d38:	d901      	bls.n	8001d3e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001d3a:	2303      	movs	r3, #3
 8001d3c:	e06d      	b.n	8001e1a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d3e:	4b3a      	ldr	r3, [pc, #232]	; (8001e28 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d0f0      	beq.n	8001d2c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001d4a:	4b36      	ldr	r3, [pc, #216]	; (8001e24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d4c:	6a1b      	ldr	r3, [r3, #32]
 8001d4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d52:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d02e      	beq.n	8001db8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d62:	68fa      	ldr	r2, [r7, #12]
 8001d64:	429a      	cmp	r2, r3
 8001d66:	d027      	beq.n	8001db8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001d68:	4b2e      	ldr	r3, [pc, #184]	; (8001e24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d6a:	6a1b      	ldr	r3, [r3, #32]
 8001d6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d70:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001d72:	4b2e      	ldr	r3, [pc, #184]	; (8001e2c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001d74:	2201      	movs	r2, #1
 8001d76:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001d78:	4b2c      	ldr	r3, [pc, #176]	; (8001e2c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001d7e:	4a29      	ldr	r2, [pc, #164]	; (8001e24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	f003 0301 	and.w	r3, r3, #1
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d014      	beq.n	8001db8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d8e:	f7fe fe11 	bl	80009b4 <HAL_GetTick>
 8001d92:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d94:	e00a      	b.n	8001dac <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d96:	f7fe fe0d 	bl	80009b4 <HAL_GetTick>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	1ad3      	subs	r3, r2, r3
 8001da0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d901      	bls.n	8001dac <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001da8:	2303      	movs	r3, #3
 8001daa:	e036      	b.n	8001e1a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dac:	4b1d      	ldr	r3, [pc, #116]	; (8001e24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001dae:	6a1b      	ldr	r3, [r3, #32]
 8001db0:	f003 0302 	and.w	r3, r3, #2
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d0ee      	beq.n	8001d96 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001db8:	4b1a      	ldr	r3, [pc, #104]	; (8001e24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001dba:	6a1b      	ldr	r3, [r3, #32]
 8001dbc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	4917      	ldr	r1, [pc, #92]	; (8001e24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001dca:	7dfb      	ldrb	r3, [r7, #23]
 8001dcc:	2b01      	cmp	r3, #1
 8001dce:	d105      	bne.n	8001ddc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dd0:	4b14      	ldr	r3, [pc, #80]	; (8001e24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001dd2:	69db      	ldr	r3, [r3, #28]
 8001dd4:	4a13      	ldr	r2, [pc, #76]	; (8001e24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001dd6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001dda:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f003 0302 	and.w	r3, r3, #2
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d008      	beq.n	8001dfa <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001de8:	4b0e      	ldr	r3, [pc, #56]	; (8001e24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	490b      	ldr	r1, [pc, #44]	; (8001e24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001df6:	4313      	orrs	r3, r2
 8001df8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f003 0310 	and.w	r3, r3, #16
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d008      	beq.n	8001e18 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001e06:	4b07      	ldr	r3, [pc, #28]	; (8001e24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	68db      	ldr	r3, [r3, #12]
 8001e12:	4904      	ldr	r1, [pc, #16]	; (8001e24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e14:	4313      	orrs	r3, r2
 8001e16:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001e18:	2300      	movs	r3, #0
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3718      	adds	r7, #24
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	40021000 	.word	0x40021000
 8001e28:	40007000 	.word	0x40007000
 8001e2c:	42420440 	.word	0x42420440

08001e30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b082      	sub	sp, #8
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d101      	bne.n	8001e42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e041      	b.n	8001ec6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e48:	b2db      	uxtb	r3, r3
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d106      	bne.n	8001e5c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2200      	movs	r2, #0
 8001e52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	f7fe fc74 	bl	8000744 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2202      	movs	r2, #2
 8001e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	3304      	adds	r3, #4
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	4610      	mov	r0, r2
 8001e70:	f000 f8f4 	bl	800205c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2201      	movs	r2, #1
 8001e78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2201      	movs	r2, #1
 8001e80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2201      	movs	r2, #1
 8001e88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2201      	movs	r2, #1
 8001e90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2201      	movs	r2, #1
 8001e98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2201      	movs	r2, #1
 8001eb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001ec4:	2300      	movs	r3, #0
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3708      	adds	r7, #8
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}

08001ece <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001ece:	b580      	push	{r7, lr}
 8001ed0:	b084      	sub	sp, #16
 8001ed2:	af00      	add	r7, sp, #0
 8001ed4:	6078      	str	r0, [r7, #4]
 8001ed6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ee2:	2b01      	cmp	r3, #1
 8001ee4:	d101      	bne.n	8001eea <HAL_TIM_ConfigClockSource+0x1c>
 8001ee6:	2302      	movs	r3, #2
 8001ee8:	e0b4      	b.n	8002054 <HAL_TIM_ConfigClockSource+0x186>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2201      	movs	r2, #1
 8001eee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2202      	movs	r2, #2
 8001ef6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001f02:	68bb      	ldr	r3, [r7, #8]
 8001f04:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001f08:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001f0a:	68bb      	ldr	r3, [r7, #8]
 8001f0c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001f10:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	68ba      	ldr	r2, [r7, #8]
 8001f18:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f22:	d03e      	beq.n	8001fa2 <HAL_TIM_ConfigClockSource+0xd4>
 8001f24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f28:	f200 8087 	bhi.w	800203a <HAL_TIM_ConfigClockSource+0x16c>
 8001f2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f30:	f000 8086 	beq.w	8002040 <HAL_TIM_ConfigClockSource+0x172>
 8001f34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f38:	d87f      	bhi.n	800203a <HAL_TIM_ConfigClockSource+0x16c>
 8001f3a:	2b70      	cmp	r3, #112	; 0x70
 8001f3c:	d01a      	beq.n	8001f74 <HAL_TIM_ConfigClockSource+0xa6>
 8001f3e:	2b70      	cmp	r3, #112	; 0x70
 8001f40:	d87b      	bhi.n	800203a <HAL_TIM_ConfigClockSource+0x16c>
 8001f42:	2b60      	cmp	r3, #96	; 0x60
 8001f44:	d050      	beq.n	8001fe8 <HAL_TIM_ConfigClockSource+0x11a>
 8001f46:	2b60      	cmp	r3, #96	; 0x60
 8001f48:	d877      	bhi.n	800203a <HAL_TIM_ConfigClockSource+0x16c>
 8001f4a:	2b50      	cmp	r3, #80	; 0x50
 8001f4c:	d03c      	beq.n	8001fc8 <HAL_TIM_ConfigClockSource+0xfa>
 8001f4e:	2b50      	cmp	r3, #80	; 0x50
 8001f50:	d873      	bhi.n	800203a <HAL_TIM_ConfigClockSource+0x16c>
 8001f52:	2b40      	cmp	r3, #64	; 0x40
 8001f54:	d058      	beq.n	8002008 <HAL_TIM_ConfigClockSource+0x13a>
 8001f56:	2b40      	cmp	r3, #64	; 0x40
 8001f58:	d86f      	bhi.n	800203a <HAL_TIM_ConfigClockSource+0x16c>
 8001f5a:	2b30      	cmp	r3, #48	; 0x30
 8001f5c:	d064      	beq.n	8002028 <HAL_TIM_ConfigClockSource+0x15a>
 8001f5e:	2b30      	cmp	r3, #48	; 0x30
 8001f60:	d86b      	bhi.n	800203a <HAL_TIM_ConfigClockSource+0x16c>
 8001f62:	2b20      	cmp	r3, #32
 8001f64:	d060      	beq.n	8002028 <HAL_TIM_ConfigClockSource+0x15a>
 8001f66:	2b20      	cmp	r3, #32
 8001f68:	d867      	bhi.n	800203a <HAL_TIM_ConfigClockSource+0x16c>
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d05c      	beq.n	8002028 <HAL_TIM_ConfigClockSource+0x15a>
 8001f6e:	2b10      	cmp	r3, #16
 8001f70:	d05a      	beq.n	8002028 <HAL_TIM_ConfigClockSource+0x15a>
 8001f72:	e062      	b.n	800203a <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6818      	ldr	r0, [r3, #0]
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	6899      	ldr	r1, [r3, #8]
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	685a      	ldr	r2, [r3, #4]
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	68db      	ldr	r3, [r3, #12]
 8001f84:	f000 f939 	bl	80021fa <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001f96:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	68ba      	ldr	r2, [r7, #8]
 8001f9e:	609a      	str	r2, [r3, #8]
      break;
 8001fa0:	e04f      	b.n	8002042 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6818      	ldr	r0, [r3, #0]
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	6899      	ldr	r1, [r3, #8]
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	685a      	ldr	r2, [r3, #4]
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	68db      	ldr	r3, [r3, #12]
 8001fb2:	f000 f922 	bl	80021fa <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	689a      	ldr	r2, [r3, #8]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001fc4:	609a      	str	r2, [r3, #8]
      break;
 8001fc6:	e03c      	b.n	8002042 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6818      	ldr	r0, [r3, #0]
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	6859      	ldr	r1, [r3, #4]
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	68db      	ldr	r3, [r3, #12]
 8001fd4:	461a      	mov	r2, r3
 8001fd6:	f000 f899 	bl	800210c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	2150      	movs	r1, #80	; 0x50
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f000 f8f0 	bl	80021c6 <TIM_ITRx_SetConfig>
      break;
 8001fe6:	e02c      	b.n	8002042 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6818      	ldr	r0, [r3, #0]
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	6859      	ldr	r1, [r3, #4]
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	68db      	ldr	r3, [r3, #12]
 8001ff4:	461a      	mov	r2, r3
 8001ff6:	f000 f8b7 	bl	8002168 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	2160      	movs	r1, #96	; 0x60
 8002000:	4618      	mov	r0, r3
 8002002:	f000 f8e0 	bl	80021c6 <TIM_ITRx_SetConfig>
      break;
 8002006:	e01c      	b.n	8002042 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6818      	ldr	r0, [r3, #0]
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	6859      	ldr	r1, [r3, #4]
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	461a      	mov	r2, r3
 8002016:	f000 f879 	bl	800210c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	2140      	movs	r1, #64	; 0x40
 8002020:	4618      	mov	r0, r3
 8002022:	f000 f8d0 	bl	80021c6 <TIM_ITRx_SetConfig>
      break;
 8002026:	e00c      	b.n	8002042 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4619      	mov	r1, r3
 8002032:	4610      	mov	r0, r2
 8002034:	f000 f8c7 	bl	80021c6 <TIM_ITRx_SetConfig>
      break;
 8002038:	e003      	b.n	8002042 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	73fb      	strb	r3, [r7, #15]
      break;
 800203e:	e000      	b.n	8002042 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002040:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2201      	movs	r2, #1
 8002046:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2200      	movs	r2, #0
 800204e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002052:	7bfb      	ldrb	r3, [r7, #15]
}
 8002054:	4618      	mov	r0, r3
 8002056:	3710      	adds	r7, #16
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}

0800205c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800205c:	b480      	push	{r7}
 800205e:	b085      	sub	sp, #20
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
 8002064:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	4a25      	ldr	r2, [pc, #148]	; (8002104 <TIM_Base_SetConfig+0xa8>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d007      	beq.n	8002084 <TIM_Base_SetConfig+0x28>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800207a:	d003      	beq.n	8002084 <TIM_Base_SetConfig+0x28>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	4a22      	ldr	r2, [pc, #136]	; (8002108 <TIM_Base_SetConfig+0xac>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d108      	bne.n	8002096 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800208a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	68fa      	ldr	r2, [r7, #12]
 8002092:	4313      	orrs	r3, r2
 8002094:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4a1a      	ldr	r2, [pc, #104]	; (8002104 <TIM_Base_SetConfig+0xa8>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d007      	beq.n	80020ae <TIM_Base_SetConfig+0x52>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020a4:	d003      	beq.n	80020ae <TIM_Base_SetConfig+0x52>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	4a17      	ldr	r2, [pc, #92]	; (8002108 <TIM_Base_SetConfig+0xac>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d108      	bne.n	80020c0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	68db      	ldr	r3, [r3, #12]
 80020ba:	68fa      	ldr	r2, [r7, #12]
 80020bc:	4313      	orrs	r3, r2
 80020be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	695b      	ldr	r3, [r3, #20]
 80020ca:	4313      	orrs	r3, r2
 80020cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	68fa      	ldr	r2, [r7, #12]
 80020d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	689a      	ldr	r2, [r3, #8]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	681a      	ldr	r2, [r3, #0]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	4a07      	ldr	r2, [pc, #28]	; (8002104 <TIM_Base_SetConfig+0xa8>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d103      	bne.n	80020f4 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	691a      	ldr	r2, [r3, #16]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2201      	movs	r2, #1
 80020f8:	615a      	str	r2, [r3, #20]
}
 80020fa:	bf00      	nop
 80020fc:	3714      	adds	r7, #20
 80020fe:	46bd      	mov	sp, r7
 8002100:	bc80      	pop	{r7}
 8002102:	4770      	bx	lr
 8002104:	40012c00 	.word	0x40012c00
 8002108:	40000400 	.word	0x40000400

0800210c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800210c:	b480      	push	{r7}
 800210e:	b087      	sub	sp, #28
 8002110:	af00      	add	r7, sp, #0
 8002112:	60f8      	str	r0, [r7, #12]
 8002114:	60b9      	str	r1, [r7, #8]
 8002116:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	6a1b      	ldr	r3, [r3, #32]
 800211c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	6a1b      	ldr	r3, [r3, #32]
 8002122:	f023 0201 	bic.w	r2, r3, #1
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	699b      	ldr	r3, [r3, #24]
 800212e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002136:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	011b      	lsls	r3, r3, #4
 800213c:	693a      	ldr	r2, [r7, #16]
 800213e:	4313      	orrs	r3, r2
 8002140:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	f023 030a 	bic.w	r3, r3, #10
 8002148:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800214a:	697a      	ldr	r2, [r7, #20]
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	4313      	orrs	r3, r2
 8002150:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	693a      	ldr	r2, [r7, #16]
 8002156:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	697a      	ldr	r2, [r7, #20]
 800215c:	621a      	str	r2, [r3, #32]
}
 800215e:	bf00      	nop
 8002160:	371c      	adds	r7, #28
 8002162:	46bd      	mov	sp, r7
 8002164:	bc80      	pop	{r7}
 8002166:	4770      	bx	lr

08002168 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002168:	b480      	push	{r7}
 800216a:	b087      	sub	sp, #28
 800216c:	af00      	add	r7, sp, #0
 800216e:	60f8      	str	r0, [r7, #12]
 8002170:	60b9      	str	r1, [r7, #8]
 8002172:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	6a1b      	ldr	r3, [r3, #32]
 8002178:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	6a1b      	ldr	r3, [r3, #32]
 800217e:	f023 0210 	bic.w	r2, r3, #16
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	699b      	ldr	r3, [r3, #24]
 800218a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002192:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	031b      	lsls	r3, r3, #12
 8002198:	693a      	ldr	r2, [r7, #16]
 800219a:	4313      	orrs	r3, r2
 800219c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80021a4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	011b      	lsls	r3, r3, #4
 80021aa:	697a      	ldr	r2, [r7, #20]
 80021ac:	4313      	orrs	r3, r2
 80021ae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	693a      	ldr	r2, [r7, #16]
 80021b4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	697a      	ldr	r2, [r7, #20]
 80021ba:	621a      	str	r2, [r3, #32]
}
 80021bc:	bf00      	nop
 80021be:	371c      	adds	r7, #28
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bc80      	pop	{r7}
 80021c4:	4770      	bx	lr

080021c6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80021c6:	b480      	push	{r7}
 80021c8:	b085      	sub	sp, #20
 80021ca:	af00      	add	r7, sp, #0
 80021cc:	6078      	str	r0, [r7, #4]
 80021ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80021de:	683a      	ldr	r2, [r7, #0]
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	4313      	orrs	r3, r2
 80021e4:	f043 0307 	orr.w	r3, r3, #7
 80021e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	68fa      	ldr	r2, [r7, #12]
 80021ee:	609a      	str	r2, [r3, #8]
}
 80021f0:	bf00      	nop
 80021f2:	3714      	adds	r7, #20
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bc80      	pop	{r7}
 80021f8:	4770      	bx	lr

080021fa <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80021fa:	b480      	push	{r7}
 80021fc:	b087      	sub	sp, #28
 80021fe:	af00      	add	r7, sp, #0
 8002200:	60f8      	str	r0, [r7, #12]
 8002202:	60b9      	str	r1, [r7, #8]
 8002204:	607a      	str	r2, [r7, #4]
 8002206:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002214:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	021a      	lsls	r2, r3, #8
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	431a      	orrs	r2, r3
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	4313      	orrs	r3, r2
 8002222:	697a      	ldr	r2, [r7, #20]
 8002224:	4313      	orrs	r3, r2
 8002226:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	697a      	ldr	r2, [r7, #20]
 800222c:	609a      	str	r2, [r3, #8]
}
 800222e:	bf00      	nop
 8002230:	371c      	adds	r7, #28
 8002232:	46bd      	mov	sp, r7
 8002234:	bc80      	pop	{r7}
 8002236:	4770      	bx	lr

08002238 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002238:	b480      	push	{r7}
 800223a:	b085      	sub	sp, #20
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
 8002240:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002248:	2b01      	cmp	r3, #1
 800224a:	d101      	bne.n	8002250 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800224c:	2302      	movs	r3, #2
 800224e:	e041      	b.n	80022d4 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2201      	movs	r2, #1
 8002254:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2202      	movs	r2, #2
 800225c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002276:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	68fa      	ldr	r2, [r7, #12]
 800227e:	4313      	orrs	r3, r2
 8002280:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	68fa      	ldr	r2, [r7, #12]
 8002288:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a14      	ldr	r2, [pc, #80]	; (80022e0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d009      	beq.n	80022a8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800229c:	d004      	beq.n	80022a8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a10      	ldr	r2, [pc, #64]	; (80022e4 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d10c      	bne.n	80022c2 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80022ae:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	68ba      	ldr	r2, [r7, #8]
 80022b6:	4313      	orrs	r3, r2
 80022b8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	68ba      	ldr	r2, [r7, #8]
 80022c0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2201      	movs	r2, #1
 80022c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2200      	movs	r2, #0
 80022ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80022d2:	2300      	movs	r3, #0
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	3714      	adds	r7, #20
 80022d8:	46bd      	mov	sp, r7
 80022da:	bc80      	pop	{r7}
 80022dc:	4770      	bx	lr
 80022de:	bf00      	nop
 80022e0:	40012c00 	.word	0x40012c00
 80022e4:	40000400 	.word	0x40000400

080022e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b082      	sub	sp, #8
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d101      	bne.n	80022fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	e042      	b.n	8002380 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002300:	b2db      	uxtb	r3, r3
 8002302:	2b00      	cmp	r3, #0
 8002304:	d106      	bne.n	8002314 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2200      	movs	r2, #0
 800230a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	f7fe fa34 	bl	800077c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2224      	movs	r2, #36	; 0x24
 8002318:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	68da      	ldr	r2, [r3, #12]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800232a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800232c:	6878      	ldr	r0, [r7, #4]
 800232e:	f000 fdc5 	bl	8002ebc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	691a      	ldr	r2, [r3, #16]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002340:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	695a      	ldr	r2, [r3, #20]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002350:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	68da      	ldr	r2, [r3, #12]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002360:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2200      	movs	r2, #0
 8002366:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2220      	movs	r2, #32
 800236c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2220      	movs	r2, #32
 8002374:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2200      	movs	r2, #0
 800237c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800237e:	2300      	movs	r3, #0
}
 8002380:	4618      	mov	r0, r3
 8002382:	3708      	adds	r7, #8
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}

08002388 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b08a      	sub	sp, #40	; 0x28
 800238c:	af02      	add	r7, sp, #8
 800238e:	60f8      	str	r0, [r7, #12]
 8002390:	60b9      	str	r1, [r7, #8]
 8002392:	603b      	str	r3, [r7, #0]
 8002394:	4613      	mov	r3, r2
 8002396:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002398:	2300      	movs	r3, #0
 800239a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023a2:	b2db      	uxtb	r3, r3
 80023a4:	2b20      	cmp	r3, #32
 80023a6:	d16d      	bne.n	8002484 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d002      	beq.n	80023b4 <HAL_UART_Transmit+0x2c>
 80023ae:	88fb      	ldrh	r3, [r7, #6]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d101      	bne.n	80023b8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80023b4:	2301      	movs	r3, #1
 80023b6:	e066      	b.n	8002486 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	2200      	movs	r2, #0
 80023bc:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	2221      	movs	r2, #33	; 0x21
 80023c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80023c6:	f7fe faf5 	bl	80009b4 <HAL_GetTick>
 80023ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	88fa      	ldrh	r2, [r7, #6]
 80023d0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	88fa      	ldrh	r2, [r7, #6]
 80023d6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023e0:	d108      	bne.n	80023f4 <HAL_UART_Transmit+0x6c>
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	691b      	ldr	r3, [r3, #16]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d104      	bne.n	80023f4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80023ea:	2300      	movs	r3, #0
 80023ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	61bb      	str	r3, [r7, #24]
 80023f2:	e003      	b.n	80023fc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80023f8:	2300      	movs	r3, #0
 80023fa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80023fc:	e02a      	b.n	8002454 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	9300      	str	r3, [sp, #0]
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	2200      	movs	r2, #0
 8002406:	2180      	movs	r1, #128	; 0x80
 8002408:	68f8      	ldr	r0, [r7, #12]
 800240a:	f000 fb14 	bl	8002a36 <UART_WaitOnFlagUntilTimeout>
 800240e:	4603      	mov	r3, r0
 8002410:	2b00      	cmp	r3, #0
 8002412:	d001      	beq.n	8002418 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002414:	2303      	movs	r3, #3
 8002416:	e036      	b.n	8002486 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002418:	69fb      	ldr	r3, [r7, #28]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d10b      	bne.n	8002436 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800241e:	69bb      	ldr	r3, [r7, #24]
 8002420:	881b      	ldrh	r3, [r3, #0]
 8002422:	461a      	mov	r2, r3
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800242c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800242e:	69bb      	ldr	r3, [r7, #24]
 8002430:	3302      	adds	r3, #2
 8002432:	61bb      	str	r3, [r7, #24]
 8002434:	e007      	b.n	8002446 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	781a      	ldrb	r2, [r3, #0]
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002440:	69fb      	ldr	r3, [r7, #28]
 8002442:	3301      	adds	r3, #1
 8002444:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800244a:	b29b      	uxth	r3, r3
 800244c:	3b01      	subs	r3, #1
 800244e:	b29a      	uxth	r2, r3
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002458:	b29b      	uxth	r3, r3
 800245a:	2b00      	cmp	r3, #0
 800245c:	d1cf      	bne.n	80023fe <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	9300      	str	r3, [sp, #0]
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	2200      	movs	r2, #0
 8002466:	2140      	movs	r1, #64	; 0x40
 8002468:	68f8      	ldr	r0, [r7, #12]
 800246a:	f000 fae4 	bl	8002a36 <UART_WaitOnFlagUntilTimeout>
 800246e:	4603      	mov	r3, r0
 8002470:	2b00      	cmp	r3, #0
 8002472:	d001      	beq.n	8002478 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002474:	2303      	movs	r3, #3
 8002476:	e006      	b.n	8002486 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	2220      	movs	r2, #32
 800247c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002480:	2300      	movs	r3, #0
 8002482:	e000      	b.n	8002486 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002484:	2302      	movs	r3, #2
  }
}
 8002486:	4618      	mov	r0, r3
 8002488:	3720      	adds	r7, #32
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}

0800248e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800248e:	b580      	push	{r7, lr}
 8002490:	b084      	sub	sp, #16
 8002492:	af00      	add	r7, sp, #0
 8002494:	60f8      	str	r0, [r7, #12]
 8002496:	60b9      	str	r1, [r7, #8]
 8002498:	4613      	mov	r3, r2
 800249a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80024a2:	b2db      	uxtb	r3, r3
 80024a4:	2b20      	cmp	r3, #32
 80024a6:	d112      	bne.n	80024ce <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d002      	beq.n	80024b4 <HAL_UART_Receive_IT+0x26>
 80024ae:	88fb      	ldrh	r3, [r7, #6]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d101      	bne.n	80024b8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	e00b      	b.n	80024d0 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	2200      	movs	r2, #0
 80024bc:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80024be:	88fb      	ldrh	r3, [r7, #6]
 80024c0:	461a      	mov	r2, r3
 80024c2:	68b9      	ldr	r1, [r7, #8]
 80024c4:	68f8      	ldr	r0, [r7, #12]
 80024c6:	f000 fb24 	bl	8002b12 <UART_Start_Receive_IT>
 80024ca:	4603      	mov	r3, r0
 80024cc:	e000      	b.n	80024d0 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80024ce:	2302      	movs	r3, #2
  }
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	3710      	adds	r7, #16
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}

080024d8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b0ba      	sub	sp, #232	; 0xe8
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	68db      	ldr	r3, [r3, #12]
 80024f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	695b      	ldr	r3, [r3, #20]
 80024fa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80024fe:	2300      	movs	r3, #0
 8002500:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002504:	2300      	movs	r3, #0
 8002506:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800250a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800250e:	f003 030f 	and.w	r3, r3, #15
 8002512:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002516:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800251a:	2b00      	cmp	r3, #0
 800251c:	d10f      	bne.n	800253e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800251e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002522:	f003 0320 	and.w	r3, r3, #32
 8002526:	2b00      	cmp	r3, #0
 8002528:	d009      	beq.n	800253e <HAL_UART_IRQHandler+0x66>
 800252a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800252e:	f003 0320 	and.w	r3, r3, #32
 8002532:	2b00      	cmp	r3, #0
 8002534:	d003      	beq.n	800253e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	f000 fc01 	bl	8002d3e <UART_Receive_IT>
      return;
 800253c:	e25b      	b.n	80029f6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800253e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002542:	2b00      	cmp	r3, #0
 8002544:	f000 80de 	beq.w	8002704 <HAL_UART_IRQHandler+0x22c>
 8002548:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800254c:	f003 0301 	and.w	r3, r3, #1
 8002550:	2b00      	cmp	r3, #0
 8002552:	d106      	bne.n	8002562 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002554:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002558:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800255c:	2b00      	cmp	r3, #0
 800255e:	f000 80d1 	beq.w	8002704 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002562:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002566:	f003 0301 	and.w	r3, r3, #1
 800256a:	2b00      	cmp	r3, #0
 800256c:	d00b      	beq.n	8002586 <HAL_UART_IRQHandler+0xae>
 800256e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002572:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002576:	2b00      	cmp	r3, #0
 8002578:	d005      	beq.n	8002586 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800257e:	f043 0201 	orr.w	r2, r3, #1
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002586:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800258a:	f003 0304 	and.w	r3, r3, #4
 800258e:	2b00      	cmp	r3, #0
 8002590:	d00b      	beq.n	80025aa <HAL_UART_IRQHandler+0xd2>
 8002592:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002596:	f003 0301 	and.w	r3, r3, #1
 800259a:	2b00      	cmp	r3, #0
 800259c:	d005      	beq.n	80025aa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025a2:	f043 0202 	orr.w	r2, r3, #2
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80025aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80025ae:	f003 0302 	and.w	r3, r3, #2
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d00b      	beq.n	80025ce <HAL_UART_IRQHandler+0xf6>
 80025b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80025ba:	f003 0301 	and.w	r3, r3, #1
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d005      	beq.n	80025ce <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025c6:	f043 0204 	orr.w	r2, r3, #4
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80025ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80025d2:	f003 0308 	and.w	r3, r3, #8
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d011      	beq.n	80025fe <HAL_UART_IRQHandler+0x126>
 80025da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80025de:	f003 0320 	and.w	r3, r3, #32
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d105      	bne.n	80025f2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80025e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80025ea:	f003 0301 	and.w	r3, r3, #1
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d005      	beq.n	80025fe <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025f6:	f043 0208 	orr.w	r2, r3, #8
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002602:	2b00      	cmp	r3, #0
 8002604:	f000 81f2 	beq.w	80029ec <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002608:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800260c:	f003 0320 	and.w	r3, r3, #32
 8002610:	2b00      	cmp	r3, #0
 8002612:	d008      	beq.n	8002626 <HAL_UART_IRQHandler+0x14e>
 8002614:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002618:	f003 0320 	and.w	r3, r3, #32
 800261c:	2b00      	cmp	r3, #0
 800261e:	d002      	beq.n	8002626 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002620:	6878      	ldr	r0, [r7, #4]
 8002622:	f000 fb8c 	bl	8002d3e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	695b      	ldr	r3, [r3, #20]
 800262c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002630:	2b00      	cmp	r3, #0
 8002632:	bf14      	ite	ne
 8002634:	2301      	movne	r3, #1
 8002636:	2300      	moveq	r3, #0
 8002638:	b2db      	uxtb	r3, r3
 800263a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002642:	f003 0308 	and.w	r3, r3, #8
 8002646:	2b00      	cmp	r3, #0
 8002648:	d103      	bne.n	8002652 <HAL_UART_IRQHandler+0x17a>
 800264a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800264e:	2b00      	cmp	r3, #0
 8002650:	d04f      	beq.n	80026f2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f000 fa96 	bl	8002b84 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	695b      	ldr	r3, [r3, #20]
 800265e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002662:	2b00      	cmp	r3, #0
 8002664:	d041      	beq.n	80026ea <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	3314      	adds	r3, #20
 800266c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002670:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002674:	e853 3f00 	ldrex	r3, [r3]
 8002678:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800267c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002680:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002684:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	3314      	adds	r3, #20
 800268e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002692:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002696:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800269a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800269e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80026a2:	e841 2300 	strex	r3, r2, [r1]
 80026a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80026aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d1d9      	bne.n	8002666 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d013      	beq.n	80026e2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026be:	4a7e      	ldr	r2, [pc, #504]	; (80028b8 <HAL_UART_IRQHandler+0x3e0>)
 80026c0:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026c6:	4618      	mov	r0, r3
 80026c8:	f7fe fce4 	bl	8001094 <HAL_DMA_Abort_IT>
 80026cc:	4603      	mov	r3, r0
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d016      	beq.n	8002700 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026d8:	687a      	ldr	r2, [r7, #4]
 80026da:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80026dc:	4610      	mov	r0, r2
 80026de:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026e0:	e00e      	b.n	8002700 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80026e2:	6878      	ldr	r0, [r7, #4]
 80026e4:	f000 f993 	bl	8002a0e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026e8:	e00a      	b.n	8002700 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80026ea:	6878      	ldr	r0, [r7, #4]
 80026ec:	f000 f98f 	bl	8002a0e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026f0:	e006      	b.n	8002700 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	f000 f98b 	bl	8002a0e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2200      	movs	r2, #0
 80026fc:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80026fe:	e175      	b.n	80029ec <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002700:	bf00      	nop
    return;
 8002702:	e173      	b.n	80029ec <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002708:	2b01      	cmp	r3, #1
 800270a:	f040 814f 	bne.w	80029ac <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800270e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002712:	f003 0310 	and.w	r3, r3, #16
 8002716:	2b00      	cmp	r3, #0
 8002718:	f000 8148 	beq.w	80029ac <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800271c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002720:	f003 0310 	and.w	r3, r3, #16
 8002724:	2b00      	cmp	r3, #0
 8002726:	f000 8141 	beq.w	80029ac <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800272a:	2300      	movs	r3, #0
 800272c:	60bb      	str	r3, [r7, #8]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	60bb      	str	r3, [r7, #8]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	60bb      	str	r3, [r7, #8]
 800273e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	695b      	ldr	r3, [r3, #20]
 8002746:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800274a:	2b00      	cmp	r3, #0
 800274c:	f000 80b6 	beq.w	80028bc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800275c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002760:	2b00      	cmp	r3, #0
 8002762:	f000 8145 	beq.w	80029f0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800276a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800276e:	429a      	cmp	r2, r3
 8002770:	f080 813e 	bcs.w	80029f0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800277a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002780:	699b      	ldr	r3, [r3, #24]
 8002782:	2b20      	cmp	r3, #32
 8002784:	f000 8088 	beq.w	8002898 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	330c      	adds	r3, #12
 800278e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002792:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002796:	e853 3f00 	ldrex	r3, [r3]
 800279a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800279e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80027a2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80027a6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	330c      	adds	r3, #12
 80027b0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80027b4:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80027b8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027bc:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80027c0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80027c4:	e841 2300 	strex	r3, r2, [r1]
 80027c8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80027cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d1d9      	bne.n	8002788 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	3314      	adds	r3, #20
 80027da:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027de:	e853 3f00 	ldrex	r3, [r3]
 80027e2:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80027e4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80027e6:	f023 0301 	bic.w	r3, r3, #1
 80027ea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	3314      	adds	r3, #20
 80027f4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80027f8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80027fc:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027fe:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002800:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002804:	e841 2300 	strex	r3, r2, [r1]
 8002808:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800280a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800280c:	2b00      	cmp	r3, #0
 800280e:	d1e1      	bne.n	80027d4 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	3314      	adds	r3, #20
 8002816:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002818:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800281a:	e853 3f00 	ldrex	r3, [r3]
 800281e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002820:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002822:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002826:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	3314      	adds	r3, #20
 8002830:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002834:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002836:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002838:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800283a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800283c:	e841 2300 	strex	r3, r2, [r1]
 8002840:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002842:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002844:	2b00      	cmp	r3, #0
 8002846:	d1e3      	bne.n	8002810 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2220      	movs	r2, #32
 800284c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2200      	movs	r2, #0
 8002854:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	330c      	adds	r3, #12
 800285c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800285e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002860:	e853 3f00 	ldrex	r3, [r3]
 8002864:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002866:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002868:	f023 0310 	bic.w	r3, r3, #16
 800286c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	330c      	adds	r3, #12
 8002876:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800287a:	65ba      	str	r2, [r7, #88]	; 0x58
 800287c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800287e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002880:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002882:	e841 2300 	strex	r3, r2, [r1]
 8002886:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002888:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800288a:	2b00      	cmp	r3, #0
 800288c:	d1e3      	bne.n	8002856 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002892:	4618      	mov	r0, r3
 8002894:	f7fe fbc3 	bl	800101e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2202      	movs	r2, #2
 800289c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80028a6:	b29b      	uxth	r3, r3
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	b29b      	uxth	r3, r3
 80028ac:	4619      	mov	r1, r3
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	f000 f8b6 	bl	8002a20 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80028b4:	e09c      	b.n	80029f0 <HAL_UART_IRQHandler+0x518>
 80028b6:	bf00      	nop
 80028b8:	08002c49 	.word	0x08002c49
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80028c4:	b29b      	uxth	r3, r3
 80028c6:	1ad3      	subs	r3, r2, r3
 80028c8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80028d0:	b29b      	uxth	r3, r3
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	f000 808e 	beq.w	80029f4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80028d8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80028dc:	2b00      	cmp	r3, #0
 80028de:	f000 8089 	beq.w	80029f4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	330c      	adds	r3, #12
 80028e8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028ec:	e853 3f00 	ldrex	r3, [r3]
 80028f0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80028f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028f4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80028f8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	330c      	adds	r3, #12
 8002902:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002906:	647a      	str	r2, [r7, #68]	; 0x44
 8002908:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800290a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800290c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800290e:	e841 2300 	strex	r3, r2, [r1]
 8002912:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002914:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002916:	2b00      	cmp	r3, #0
 8002918:	d1e3      	bne.n	80028e2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	3314      	adds	r3, #20
 8002920:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002924:	e853 3f00 	ldrex	r3, [r3]
 8002928:	623b      	str	r3, [r7, #32]
   return(result);
 800292a:	6a3b      	ldr	r3, [r7, #32]
 800292c:	f023 0301 	bic.w	r3, r3, #1
 8002930:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	3314      	adds	r3, #20
 800293a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800293e:	633a      	str	r2, [r7, #48]	; 0x30
 8002940:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002942:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002944:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002946:	e841 2300 	strex	r3, r2, [r1]
 800294a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800294c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800294e:	2b00      	cmp	r3, #0
 8002950:	d1e3      	bne.n	800291a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2220      	movs	r2, #32
 8002956:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2200      	movs	r2, #0
 800295e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	330c      	adds	r3, #12
 8002966:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	e853 3f00 	ldrex	r3, [r3]
 800296e:	60fb      	str	r3, [r7, #12]
   return(result);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	f023 0310 	bic.w	r3, r3, #16
 8002976:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	330c      	adds	r3, #12
 8002980:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002984:	61fa      	str	r2, [r7, #28]
 8002986:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002988:	69b9      	ldr	r1, [r7, #24]
 800298a:	69fa      	ldr	r2, [r7, #28]
 800298c:	e841 2300 	strex	r3, r2, [r1]
 8002990:	617b      	str	r3, [r7, #20]
   return(result);
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d1e3      	bne.n	8002960 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2202      	movs	r2, #2
 800299c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800299e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80029a2:	4619      	mov	r1, r3
 80029a4:	6878      	ldr	r0, [r7, #4]
 80029a6:	f000 f83b 	bl	8002a20 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80029aa:	e023      	b.n	80029f4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80029ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d009      	beq.n	80029cc <HAL_UART_IRQHandler+0x4f4>
 80029b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d003      	beq.n	80029cc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80029c4:	6878      	ldr	r0, [r7, #4]
 80029c6:	f000 f953 	bl	8002c70 <UART_Transmit_IT>
    return;
 80029ca:	e014      	b.n	80029f6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80029cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d00e      	beq.n	80029f6 <HAL_UART_IRQHandler+0x51e>
 80029d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d008      	beq.n	80029f6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80029e4:	6878      	ldr	r0, [r7, #4]
 80029e6:	f000 f992 	bl	8002d0e <UART_EndTransmit_IT>
    return;
 80029ea:	e004      	b.n	80029f6 <HAL_UART_IRQHandler+0x51e>
    return;
 80029ec:	bf00      	nop
 80029ee:	e002      	b.n	80029f6 <HAL_UART_IRQHandler+0x51e>
      return;
 80029f0:	bf00      	nop
 80029f2:	e000      	b.n	80029f6 <HAL_UART_IRQHandler+0x51e>
      return;
 80029f4:	bf00      	nop
  }
}
 80029f6:	37e8      	adds	r7, #232	; 0xe8
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}

080029fc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b083      	sub	sp, #12
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002a04:	bf00      	nop
 8002a06:	370c      	adds	r7, #12
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bc80      	pop	{r7}
 8002a0c:	4770      	bx	lr

08002a0e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002a0e:	b480      	push	{r7}
 8002a10:	b083      	sub	sp, #12
 8002a12:	af00      	add	r7, sp, #0
 8002a14:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002a16:	bf00      	nop
 8002a18:	370c      	adds	r7, #12
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bc80      	pop	{r7}
 8002a1e:	4770      	bx	lr

08002a20 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b083      	sub	sp, #12
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
 8002a28:	460b      	mov	r3, r1
 8002a2a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002a2c:	bf00      	nop
 8002a2e:	370c      	adds	r7, #12
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bc80      	pop	{r7}
 8002a34:	4770      	bx	lr

08002a36 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002a36:	b580      	push	{r7, lr}
 8002a38:	b090      	sub	sp, #64	; 0x40
 8002a3a:	af00      	add	r7, sp, #0
 8002a3c:	60f8      	str	r0, [r7, #12]
 8002a3e:	60b9      	str	r1, [r7, #8]
 8002a40:	603b      	str	r3, [r7, #0]
 8002a42:	4613      	mov	r3, r2
 8002a44:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a46:	e050      	b.n	8002aea <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a4e:	d04c      	beq.n	8002aea <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002a50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d007      	beq.n	8002a66 <UART_WaitOnFlagUntilTimeout+0x30>
 8002a56:	f7fd ffad 	bl	80009b4 <HAL_GetTick>
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	1ad3      	subs	r3, r2, r3
 8002a60:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002a62:	429a      	cmp	r2, r3
 8002a64:	d241      	bcs.n	8002aea <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	330c      	adds	r3, #12
 8002a6c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a70:	e853 3f00 	ldrex	r3, [r3]
 8002a74:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a78:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002a7c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	330c      	adds	r3, #12
 8002a84:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002a86:	637a      	str	r2, [r7, #52]	; 0x34
 8002a88:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a8a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002a8c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a8e:	e841 2300 	strex	r3, r2, [r1]
 8002a92:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002a94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d1e5      	bne.n	8002a66 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	3314      	adds	r3, #20
 8002aa0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	e853 3f00 	ldrex	r3, [r3]
 8002aa8:	613b      	str	r3, [r7, #16]
   return(result);
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	f023 0301 	bic.w	r3, r3, #1
 8002ab0:	63bb      	str	r3, [r7, #56]	; 0x38
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	3314      	adds	r3, #20
 8002ab8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002aba:	623a      	str	r2, [r7, #32]
 8002abc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002abe:	69f9      	ldr	r1, [r7, #28]
 8002ac0:	6a3a      	ldr	r2, [r7, #32]
 8002ac2:	e841 2300 	strex	r3, r2, [r1]
 8002ac6:	61bb      	str	r3, [r7, #24]
   return(result);
 8002ac8:	69bb      	ldr	r3, [r7, #24]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d1e5      	bne.n	8002a9a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2220      	movs	r2, #32
 8002ad2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2220      	movs	r2, #32
 8002ada:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8002ae6:	2303      	movs	r3, #3
 8002ae8:	e00f      	b.n	8002b0a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	4013      	ands	r3, r2
 8002af4:	68ba      	ldr	r2, [r7, #8]
 8002af6:	429a      	cmp	r2, r3
 8002af8:	bf0c      	ite	eq
 8002afa:	2301      	moveq	r3, #1
 8002afc:	2300      	movne	r3, #0
 8002afe:	b2db      	uxtb	r3, r3
 8002b00:	461a      	mov	r2, r3
 8002b02:	79fb      	ldrb	r3, [r7, #7]
 8002b04:	429a      	cmp	r2, r3
 8002b06:	d09f      	beq.n	8002a48 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002b08:	2300      	movs	r3, #0
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	3740      	adds	r7, #64	; 0x40
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}

08002b12 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002b12:	b480      	push	{r7}
 8002b14:	b085      	sub	sp, #20
 8002b16:	af00      	add	r7, sp, #0
 8002b18:	60f8      	str	r0, [r7, #12]
 8002b1a:	60b9      	str	r1, [r7, #8]
 8002b1c:	4613      	mov	r3, r2
 8002b1e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	68ba      	ldr	r2, [r7, #8]
 8002b24:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	88fa      	ldrh	r2, [r7, #6]
 8002b2a:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	88fa      	ldrh	r2, [r7, #6]
 8002b30:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	2200      	movs	r2, #0
 8002b36:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	2222      	movs	r2, #34	; 0x22
 8002b3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	691b      	ldr	r3, [r3, #16]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d007      	beq.n	8002b58 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	68da      	ldr	r2, [r3, #12]
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b56:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	695a      	ldr	r2, [r3, #20]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f042 0201 	orr.w	r2, r2, #1
 8002b66:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	68da      	ldr	r2, [r3, #12]
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f042 0220 	orr.w	r2, r2, #32
 8002b76:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002b78:	2300      	movs	r3, #0
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3714      	adds	r7, #20
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bc80      	pop	{r7}
 8002b82:	4770      	bx	lr

08002b84 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b095      	sub	sp, #84	; 0x54
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	330c      	adds	r3, #12
 8002b92:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b96:	e853 3f00 	ldrex	r3, [r3]
 8002b9a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b9e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002ba2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	330c      	adds	r3, #12
 8002baa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002bac:	643a      	str	r2, [r7, #64]	; 0x40
 8002bae:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bb0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002bb2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002bb4:	e841 2300 	strex	r3, r2, [r1]
 8002bb8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002bba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d1e5      	bne.n	8002b8c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	3314      	adds	r3, #20
 8002bc6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bc8:	6a3b      	ldr	r3, [r7, #32]
 8002bca:	e853 3f00 	ldrex	r3, [r3]
 8002bce:	61fb      	str	r3, [r7, #28]
   return(result);
 8002bd0:	69fb      	ldr	r3, [r7, #28]
 8002bd2:	f023 0301 	bic.w	r3, r3, #1
 8002bd6:	64bb      	str	r3, [r7, #72]	; 0x48
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	3314      	adds	r3, #20
 8002bde:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002be0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002be2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002be4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002be6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002be8:	e841 2300 	strex	r3, r2, [r1]
 8002bec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d1e5      	bne.n	8002bc0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	d119      	bne.n	8002c30 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	330c      	adds	r3, #12
 8002c02:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	e853 3f00 	ldrex	r3, [r3]
 8002c0a:	60bb      	str	r3, [r7, #8]
   return(result);
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	f023 0310 	bic.w	r3, r3, #16
 8002c12:	647b      	str	r3, [r7, #68]	; 0x44
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	330c      	adds	r3, #12
 8002c1a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002c1c:	61ba      	str	r2, [r7, #24]
 8002c1e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c20:	6979      	ldr	r1, [r7, #20]
 8002c22:	69ba      	ldr	r2, [r7, #24]
 8002c24:	e841 2300 	strex	r3, r2, [r1]
 8002c28:	613b      	str	r3, [r7, #16]
   return(result);
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d1e5      	bne.n	8002bfc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2220      	movs	r2, #32
 8002c34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002c3e:	bf00      	nop
 8002c40:	3754      	adds	r7, #84	; 0x54
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bc80      	pop	{r7}
 8002c46:	4770      	bx	lr

08002c48 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b084      	sub	sp, #16
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c54:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002c62:	68f8      	ldr	r0, [r7, #12]
 8002c64:	f7ff fed3 	bl	8002a0e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002c68:	bf00      	nop
 8002c6a:	3710      	adds	r7, #16
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}

08002c70 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b085      	sub	sp, #20
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c7e:	b2db      	uxtb	r3, r3
 8002c80:	2b21      	cmp	r3, #33	; 0x21
 8002c82:	d13e      	bne.n	8002d02 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c8c:	d114      	bne.n	8002cb8 <UART_Transmit_IT+0x48>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	691b      	ldr	r3, [r3, #16]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d110      	bne.n	8002cb8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6a1b      	ldr	r3, [r3, #32]
 8002c9a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	881b      	ldrh	r3, [r3, #0]
 8002ca0:	461a      	mov	r2, r3
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002caa:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6a1b      	ldr	r3, [r3, #32]
 8002cb0:	1c9a      	adds	r2, r3, #2
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	621a      	str	r2, [r3, #32]
 8002cb6:	e008      	b.n	8002cca <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6a1b      	ldr	r3, [r3, #32]
 8002cbc:	1c59      	adds	r1, r3, #1
 8002cbe:	687a      	ldr	r2, [r7, #4]
 8002cc0:	6211      	str	r1, [r2, #32]
 8002cc2:	781a      	ldrb	r2, [r3, #0]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002cce:	b29b      	uxth	r3, r3
 8002cd0:	3b01      	subs	r3, #1
 8002cd2:	b29b      	uxth	r3, r3
 8002cd4:	687a      	ldr	r2, [r7, #4]
 8002cd6:	4619      	mov	r1, r3
 8002cd8:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d10f      	bne.n	8002cfe <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	68da      	ldr	r2, [r3, #12]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002cec:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	68da      	ldr	r2, [r3, #12]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002cfc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	e000      	b.n	8002d04 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002d02:	2302      	movs	r3, #2
  }
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	3714      	adds	r7, #20
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bc80      	pop	{r7}
 8002d0c:	4770      	bx	lr

08002d0e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002d0e:	b580      	push	{r7, lr}
 8002d10:	b082      	sub	sp, #8
 8002d12:	af00      	add	r7, sp, #0
 8002d14:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	68da      	ldr	r2, [r3, #12]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d24:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2220      	movs	r2, #32
 8002d2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	f7ff fe64 	bl	80029fc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002d34:	2300      	movs	r3, #0
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	3708      	adds	r7, #8
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}

08002d3e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002d3e:	b580      	push	{r7, lr}
 8002d40:	b08c      	sub	sp, #48	; 0x30
 8002d42:	af00      	add	r7, sp, #0
 8002d44:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	2b22      	cmp	r3, #34	; 0x22
 8002d50:	f040 80ae 	bne.w	8002eb0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d5c:	d117      	bne.n	8002d8e <UART_Receive_IT+0x50>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	691b      	ldr	r3, [r3, #16]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d113      	bne.n	8002d8e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002d66:	2300      	movs	r3, #0
 8002d68:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d6e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	b29b      	uxth	r3, r3
 8002d78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d7c:	b29a      	uxth	r2, r3
 8002d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d80:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d86:	1c9a      	adds	r2, r3, #2
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	629a      	str	r2, [r3, #40]	; 0x28
 8002d8c:	e026      	b.n	8002ddc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d92:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002d94:	2300      	movs	r3, #0
 8002d96:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002da0:	d007      	beq.n	8002db2 <UART_Receive_IT+0x74>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d10a      	bne.n	8002dc0 <UART_Receive_IT+0x82>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	691b      	ldr	r3, [r3, #16]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d106      	bne.n	8002dc0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	b2da      	uxtb	r2, r3
 8002dba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dbc:	701a      	strb	r2, [r3, #0]
 8002dbe:	e008      	b.n	8002dd2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	b2db      	uxtb	r3, r3
 8002dc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002dcc:	b2da      	uxtb	r2, r3
 8002dce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dd0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dd6:	1c5a      	adds	r2, r3, #1
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002de0:	b29b      	uxth	r3, r3
 8002de2:	3b01      	subs	r3, #1
 8002de4:	b29b      	uxth	r3, r3
 8002de6:	687a      	ldr	r2, [r7, #4]
 8002de8:	4619      	mov	r1, r3
 8002dea:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d15d      	bne.n	8002eac <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	68da      	ldr	r2, [r3, #12]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f022 0220 	bic.w	r2, r2, #32
 8002dfe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	68da      	ldr	r2, [r3, #12]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e0e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	695a      	ldr	r2, [r3, #20]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f022 0201 	bic.w	r2, r2, #1
 8002e1e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2220      	movs	r2, #32
 8002e24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	d135      	bne.n	8002ea2 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	330c      	adds	r3, #12
 8002e42:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	e853 3f00 	ldrex	r3, [r3]
 8002e4a:	613b      	str	r3, [r7, #16]
   return(result);
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	f023 0310 	bic.w	r3, r3, #16
 8002e52:	627b      	str	r3, [r7, #36]	; 0x24
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	330c      	adds	r3, #12
 8002e5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e5c:	623a      	str	r2, [r7, #32]
 8002e5e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e60:	69f9      	ldr	r1, [r7, #28]
 8002e62:	6a3a      	ldr	r2, [r7, #32]
 8002e64:	e841 2300 	strex	r3, r2, [r1]
 8002e68:	61bb      	str	r3, [r7, #24]
   return(result);
 8002e6a:	69bb      	ldr	r3, [r7, #24]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d1e5      	bne.n	8002e3c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 0310 	and.w	r3, r3, #16
 8002e7a:	2b10      	cmp	r3, #16
 8002e7c:	d10a      	bne.n	8002e94 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002e7e:	2300      	movs	r3, #0
 8002e80:	60fb      	str	r3, [r7, #12]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	60fb      	str	r3, [r7, #12]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	60fb      	str	r3, [r7, #12]
 8002e92:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002e98:	4619      	mov	r1, r3
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f7ff fdc0 	bl	8002a20 <HAL_UARTEx_RxEventCallback>
 8002ea0:	e002      	b.n	8002ea8 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002ea2:	6878      	ldr	r0, [r7, #4]
 8002ea4:	f7fd f964 	bl	8000170 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	e002      	b.n	8002eb2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002eac:	2300      	movs	r3, #0
 8002eae:	e000      	b.n	8002eb2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002eb0:	2302      	movs	r3, #2
  }
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3730      	adds	r7, #48	; 0x30
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}
	...

08002ebc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b084      	sub	sp, #16
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	691b      	ldr	r3, [r3, #16]
 8002eca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	68da      	ldr	r2, [r3, #12]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	430a      	orrs	r2, r1
 8002ed8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	689a      	ldr	r2, [r3, #8]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	691b      	ldr	r3, [r3, #16]
 8002ee2:	431a      	orrs	r2, r3
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	695b      	ldr	r3, [r3, #20]
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	68db      	ldr	r3, [r3, #12]
 8002ef2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002ef6:	f023 030c 	bic.w	r3, r3, #12
 8002efa:	687a      	ldr	r2, [r7, #4]
 8002efc:	6812      	ldr	r2, [r2, #0]
 8002efe:	68b9      	ldr	r1, [r7, #8]
 8002f00:	430b      	orrs	r3, r1
 8002f02:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	695b      	ldr	r3, [r3, #20]
 8002f0a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	699a      	ldr	r2, [r3, #24]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	430a      	orrs	r2, r1
 8002f18:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a2c      	ldr	r2, [pc, #176]	; (8002fd0 <UART_SetConfig+0x114>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d103      	bne.n	8002f2c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002f24:	f7fe fe9c 	bl	8001c60 <HAL_RCC_GetPCLK2Freq>
 8002f28:	60f8      	str	r0, [r7, #12]
 8002f2a:	e002      	b.n	8002f32 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002f2c:	f7fe fe84 	bl	8001c38 <HAL_RCC_GetPCLK1Freq>
 8002f30:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002f32:	68fa      	ldr	r2, [r7, #12]
 8002f34:	4613      	mov	r3, r2
 8002f36:	009b      	lsls	r3, r3, #2
 8002f38:	4413      	add	r3, r2
 8002f3a:	009a      	lsls	r2, r3, #2
 8002f3c:	441a      	add	r2, r3
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f48:	4a22      	ldr	r2, [pc, #136]	; (8002fd4 <UART_SetConfig+0x118>)
 8002f4a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f4e:	095b      	lsrs	r3, r3, #5
 8002f50:	0119      	lsls	r1, r3, #4
 8002f52:	68fa      	ldr	r2, [r7, #12]
 8002f54:	4613      	mov	r3, r2
 8002f56:	009b      	lsls	r3, r3, #2
 8002f58:	4413      	add	r3, r2
 8002f5a:	009a      	lsls	r2, r3, #2
 8002f5c:	441a      	add	r2, r3
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	009b      	lsls	r3, r3, #2
 8002f64:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f68:	4b1a      	ldr	r3, [pc, #104]	; (8002fd4 <UART_SetConfig+0x118>)
 8002f6a:	fba3 0302 	umull	r0, r3, r3, r2
 8002f6e:	095b      	lsrs	r3, r3, #5
 8002f70:	2064      	movs	r0, #100	; 0x64
 8002f72:	fb00 f303 	mul.w	r3, r0, r3
 8002f76:	1ad3      	subs	r3, r2, r3
 8002f78:	011b      	lsls	r3, r3, #4
 8002f7a:	3332      	adds	r3, #50	; 0x32
 8002f7c:	4a15      	ldr	r2, [pc, #84]	; (8002fd4 <UART_SetConfig+0x118>)
 8002f7e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f82:	095b      	lsrs	r3, r3, #5
 8002f84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f88:	4419      	add	r1, r3
 8002f8a:	68fa      	ldr	r2, [r7, #12]
 8002f8c:	4613      	mov	r3, r2
 8002f8e:	009b      	lsls	r3, r3, #2
 8002f90:	4413      	add	r3, r2
 8002f92:	009a      	lsls	r2, r3, #2
 8002f94:	441a      	add	r2, r3
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	009b      	lsls	r3, r3, #2
 8002f9c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002fa0:	4b0c      	ldr	r3, [pc, #48]	; (8002fd4 <UART_SetConfig+0x118>)
 8002fa2:	fba3 0302 	umull	r0, r3, r3, r2
 8002fa6:	095b      	lsrs	r3, r3, #5
 8002fa8:	2064      	movs	r0, #100	; 0x64
 8002faa:	fb00 f303 	mul.w	r3, r0, r3
 8002fae:	1ad3      	subs	r3, r2, r3
 8002fb0:	011b      	lsls	r3, r3, #4
 8002fb2:	3332      	adds	r3, #50	; 0x32
 8002fb4:	4a07      	ldr	r2, [pc, #28]	; (8002fd4 <UART_SetConfig+0x118>)
 8002fb6:	fba2 2303 	umull	r2, r3, r2, r3
 8002fba:	095b      	lsrs	r3, r3, #5
 8002fbc:	f003 020f 	and.w	r2, r3, #15
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	440a      	add	r2, r1
 8002fc6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002fc8:	bf00      	nop
 8002fca:	3710      	adds	r7, #16
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}
 8002fd0:	40013800 	.word	0x40013800
 8002fd4:	51eb851f 	.word	0x51eb851f

08002fd8 <__libc_init_array>:
 8002fd8:	b570      	push	{r4, r5, r6, lr}
 8002fda:	2600      	movs	r6, #0
 8002fdc:	4d0c      	ldr	r5, [pc, #48]	; (8003010 <__libc_init_array+0x38>)
 8002fde:	4c0d      	ldr	r4, [pc, #52]	; (8003014 <__libc_init_array+0x3c>)
 8002fe0:	1b64      	subs	r4, r4, r5
 8002fe2:	10a4      	asrs	r4, r4, #2
 8002fe4:	42a6      	cmp	r6, r4
 8002fe6:	d109      	bne.n	8002ffc <__libc_init_array+0x24>
 8002fe8:	f000 f87e 	bl	80030e8 <_init>
 8002fec:	2600      	movs	r6, #0
 8002fee:	4d0a      	ldr	r5, [pc, #40]	; (8003018 <__libc_init_array+0x40>)
 8002ff0:	4c0a      	ldr	r4, [pc, #40]	; (800301c <__libc_init_array+0x44>)
 8002ff2:	1b64      	subs	r4, r4, r5
 8002ff4:	10a4      	asrs	r4, r4, #2
 8002ff6:	42a6      	cmp	r6, r4
 8002ff8:	d105      	bne.n	8003006 <__libc_init_array+0x2e>
 8002ffa:	bd70      	pop	{r4, r5, r6, pc}
 8002ffc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003000:	4798      	blx	r3
 8003002:	3601      	adds	r6, #1
 8003004:	e7ee      	b.n	8002fe4 <__libc_init_array+0xc>
 8003006:	f855 3b04 	ldr.w	r3, [r5], #4
 800300a:	4798      	blx	r3
 800300c:	3601      	adds	r6, #1
 800300e:	e7f2      	b.n	8002ff6 <__libc_init_array+0x1e>
 8003010:	08003150 	.word	0x08003150
 8003014:	08003150 	.word	0x08003150
 8003018:	08003150 	.word	0x08003150
 800301c:	08003154 	.word	0x08003154

08003020 <__itoa>:
 8003020:	1e93      	subs	r3, r2, #2
 8003022:	2b22      	cmp	r3, #34	; 0x22
 8003024:	b510      	push	{r4, lr}
 8003026:	460c      	mov	r4, r1
 8003028:	d904      	bls.n	8003034 <__itoa+0x14>
 800302a:	2300      	movs	r3, #0
 800302c:	461c      	mov	r4, r3
 800302e:	700b      	strb	r3, [r1, #0]
 8003030:	4620      	mov	r0, r4
 8003032:	bd10      	pop	{r4, pc}
 8003034:	2a0a      	cmp	r2, #10
 8003036:	d109      	bne.n	800304c <__itoa+0x2c>
 8003038:	2800      	cmp	r0, #0
 800303a:	da07      	bge.n	800304c <__itoa+0x2c>
 800303c:	232d      	movs	r3, #45	; 0x2d
 800303e:	700b      	strb	r3, [r1, #0]
 8003040:	2101      	movs	r1, #1
 8003042:	4240      	negs	r0, r0
 8003044:	4421      	add	r1, r4
 8003046:	f000 f80d 	bl	8003064 <__utoa>
 800304a:	e7f1      	b.n	8003030 <__itoa+0x10>
 800304c:	2100      	movs	r1, #0
 800304e:	e7f9      	b.n	8003044 <__itoa+0x24>

08003050 <itoa>:
 8003050:	f7ff bfe6 	b.w	8003020 <__itoa>

08003054 <memset>:
 8003054:	4603      	mov	r3, r0
 8003056:	4402      	add	r2, r0
 8003058:	4293      	cmp	r3, r2
 800305a:	d100      	bne.n	800305e <memset+0xa>
 800305c:	4770      	bx	lr
 800305e:	f803 1b01 	strb.w	r1, [r3], #1
 8003062:	e7f9      	b.n	8003058 <memset+0x4>

08003064 <__utoa>:
 8003064:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003066:	b08b      	sub	sp, #44	; 0x2c
 8003068:	4605      	mov	r5, r0
 800306a:	460b      	mov	r3, r1
 800306c:	466e      	mov	r6, sp
 800306e:	4c1d      	ldr	r4, [pc, #116]	; (80030e4 <__utoa+0x80>)
 8003070:	f104 0c20 	add.w	ip, r4, #32
 8003074:	4637      	mov	r7, r6
 8003076:	6820      	ldr	r0, [r4, #0]
 8003078:	6861      	ldr	r1, [r4, #4]
 800307a:	3408      	adds	r4, #8
 800307c:	c703      	stmia	r7!, {r0, r1}
 800307e:	4564      	cmp	r4, ip
 8003080:	463e      	mov	r6, r7
 8003082:	d1f7      	bne.n	8003074 <__utoa+0x10>
 8003084:	7921      	ldrb	r1, [r4, #4]
 8003086:	6820      	ldr	r0, [r4, #0]
 8003088:	7139      	strb	r1, [r7, #4]
 800308a:	1e91      	subs	r1, r2, #2
 800308c:	2922      	cmp	r1, #34	; 0x22
 800308e:	6038      	str	r0, [r7, #0]
 8003090:	f04f 0100 	mov.w	r1, #0
 8003094:	d904      	bls.n	80030a0 <__utoa+0x3c>
 8003096:	7019      	strb	r1, [r3, #0]
 8003098:	460b      	mov	r3, r1
 800309a:	4618      	mov	r0, r3
 800309c:	b00b      	add	sp, #44	; 0x2c
 800309e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80030a0:	1e58      	subs	r0, r3, #1
 80030a2:	4684      	mov	ip, r0
 80030a4:	fbb5 f7f2 	udiv	r7, r5, r2
 80030a8:	fb02 5617 	mls	r6, r2, r7, r5
 80030ac:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 80030b0:	4476      	add	r6, lr
 80030b2:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 80030b6:	460c      	mov	r4, r1
 80030b8:	f80c 6f01 	strb.w	r6, [ip, #1]!
 80030bc:	462e      	mov	r6, r5
 80030be:	42b2      	cmp	r2, r6
 80030c0:	463d      	mov	r5, r7
 80030c2:	f101 0101 	add.w	r1, r1, #1
 80030c6:	d9ed      	bls.n	80030a4 <__utoa+0x40>
 80030c8:	2200      	movs	r2, #0
 80030ca:	545a      	strb	r2, [r3, r1]
 80030cc:	1919      	adds	r1, r3, r4
 80030ce:	1aa5      	subs	r5, r4, r2
 80030d0:	42aa      	cmp	r2, r5
 80030d2:	dae2      	bge.n	800309a <__utoa+0x36>
 80030d4:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80030d8:	780e      	ldrb	r6, [r1, #0]
 80030da:	3201      	adds	r2, #1
 80030dc:	7006      	strb	r6, [r0, #0]
 80030de:	f801 5901 	strb.w	r5, [r1], #-1
 80030e2:	e7f4      	b.n	80030ce <__utoa+0x6a>
 80030e4:	0800312a 	.word	0x0800312a

080030e8 <_init>:
 80030e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030ea:	bf00      	nop
 80030ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030ee:	bc08      	pop	{r3}
 80030f0:	469e      	mov	lr, r3
 80030f2:	4770      	bx	lr

080030f4 <_fini>:
 80030f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030f6:	bf00      	nop
 80030f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030fa:	bc08      	pop	{r3}
 80030fc:	469e      	mov	lr, r3
 80030fe:	4770      	bx	lr
